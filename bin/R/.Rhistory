# Read the data for the current gene group
data <- read_csv(file_path)
# Create a new column 'Gene_Type' to differentiate functional genes and pseudogenes
data <- data %>%
mutate(Gene_Type = case_when(
# First check for exception_genes_2, where genes with "P" are functional
Gene %in% exception_genes_2 ~ "Functional",
# Then check for exception_genes, where genes do not end with "P"
Gene %in% exception_genes ~ "Pseudogene",
# For genes that has "P" but not in exception_genes_2, classify as Pseudogene
grepl("P", Gene) ~ "Pseudogene",
# All other genes are considered Functional
TRUE ~ "Functional"
))
# Separate functional genes and pseudogenes
if(expression == 'GTEX'){
functional_genes <- data$`Max Expression`[data$Gene_Type == "Functional"]
pseudogenes <- data$`Max Expression`[data$Gene_Type == "Pseudogene"]
}else{
functional_genes <- data$`Max_FPKM`[data$Gene_Type == "Functional"]
pseudogenes <- data$`Max_FPKM`[data$Gene_Type == "Pseudogene"]
}
# Add to the pooled data for later testing
all_functional_genes <- c(all_functional_genes, functional_genes)
all_pseudogenes <- c(all_pseudogenes, pseudogenes)
# Count the sample sizes for functional genes and pseudogenes
functional_n <- length(functional_genes)
pseudogene_n <- length(pseudogenes)
# Always run the KS test for each gene group, regardless of the sample sizes
ks_result <- tryCatch({
ks.test(functional_genes, pseudogenes)
}, error = function(e) {
# If there's an error (e.g., because of too few data points), return NULL
NULL
})
# If KS test was successful, store the results, otherwise, store NA
if (!is.null(ks_result)) {
test_results <- rbind(test_results, data.frame(Expression_Type = expression,
Gene_group = gene,
Statistic = ks_result$statistic,
p_value = ks_result$p.value,
Functional_Sample_Count = functional_n,
Pseudogene_Sample_Count = pseudogene_n,
stringsAsFactors = FALSE))
} else {
test_results <- rbind(test_results, data.frame(Expression_Type = expression,
Gene_group = gene,
Statistic = NA,
p_value = NA,
Functional_Sample_Count = functional_n,
Pseudogene_Sample_Count = pseudogene_n,
stringsAsFactors = FALSE))
}
# Print a message indicating that the gene has been processed
cat("Processed:", gene, "\n")
}
# Perform the KS test on the pooled functional and pseudogene data
pooled_functional_n <- length(all_functional_genes)
pooled_pseudogene_n <- length(all_pseudogenes)
# Always run the KS test on pooled data, regardless of sample size
pooled_ks_result <- tryCatch({
ks.test(all_functional_genes, all_pseudogenes)
}, error = function(e) {
NULL
})
# If KS test on pooled data was successful, store the results, otherwise, store NA
if (!is.null(pooled_ks_result)) {
test_results <- rbind(test_results, data.frame(Expression_Type = expression,
Gene_group = "Pooled",
Statistic = pooled_ks_result$statistic,
p_value = pooled_ks_result$p.value,
Functional_Sample_Count = pooled_functional_n,
Pseudogene_Sample_Count = pooled_pseudogene_n,
stringsAsFactors = FALSE))
} else {
test_results <- rbind(test_results, data.frame(Expression_Type = expression,
Gene_group = "Pooled",
Statistic = NA,
p_value = NA,
Functional_Sample_Count = pooled_functional_n,
Pseudogene_Sample_Count = pooled_pseudogene_n,
stringsAsFactors = FALSE))
}
}
# Write the results into a CSV file
write.csv(test_results, "../../results/ks_test_expression_results.csv", row.names = FALSE)
# Test random data Kolmogorov-Smirnov test
x1 <- rnorm(100)
ks.test(x1, "pnorm")
# Load the required packages
library(dplyr)
library(readr)
# Define the gene groups
gene_groups <- c("RNU1", "RNU2", "RNU4", "RNU5", "RNU6", "RNU4ATAC", "RNU6ATAC", "RNU11", "RNU12", "VTRNA",
"RNY","TRNA","RN7SL","RNU7","RN7SK")
expression_types <- c("ENCODE", "GTEX")
# Define the list of exceptions (genes that are pseudogenes but do not end with "P",from TRNA gene groups)
exception_genes <- c('TRA-AGC23-1', 'TRA-TGC9-1', 'TRC-ACA1-1', 'TRC-GCA25-1', 'TRE-CTC7-1',
'TRE-CTC16-1', 'TRE-TTC6-1', 'TRE-TTC7-1', 'TRE-TTC8-1', 'TRE-TTC9-1',
'TRE-TTC10-1', 'TRE-TTC11-1', 'TRE-TTC12-1', 'TRE-TTC13-1', 'TRF-GAA7-1',
'TRF-GAA8-1', 'TRF-GAA9-1', 'TRF-GAA10-1', 'TRF-GAA11-1', 'TRF-GAA12-1',
'TRG-CCC8-1', 'TRG-TCC5-1', 'TRG-TCC6-1', 'TRI-AAT10-1', 'TRI-AAT11-1',
'TRK-CTT12-1', 'TRK-CTT13-1', 'TRK-CTT14-1', 'TRK-CTT15-1', 'TRK-CTT16-1',
'TRK-TTT10-1', 'TRK-TTT12-1', 'TRK-TTT13-1', 'TRK-TTT15-1', 'TRL-AAG6-1',
'TRL-AAG7-1', 'TRL-TAA5-1', 'TRL-TAG4-1', 'TRN-GTT16-5', 'TRN-GTT21-1',
'TRN-GTT22-1', 'TRN-GTT23-1', 'TRQ-CTG9-1', 'TRQ-CTG11-1', 'TRQ-CTG13-1',
'TRQ-CTG16-1', 'TRQ-CTG17-1', 'TRQ-TTG5-1', 'TRQ-TTG6-1', 'TRQ-TTG10-1',
'TRR-CCT6-1', 'TRR-CCT7-1', 'TRR-CCT9-1', 'TRS-ACT1-1', 'TRUND-NNN3-1',
'TRUND-NNN4-1', 'TRUND-NNN6-1', 'TRUND-NNN7-1', 'TRUND-NNN8-1', 'TRUND-NNN9-1',
'TRUND-NNN10-1', 'TRV-CAC11-1', 'TRV-CAC11-2', 'TRX-CAT3-1', 'TRY-GTA11-1',
'TRY-GTA12-1')
#Define list of 2nd exceptions: have P but are functional genes
exception_genes_2 <- c('MT-TP', 'NMTRP-TGG1-1', 'TRP-AGG1-1', 'TRP-AGG2-1', 'TRP-AGG2-2', 'TRP-AGG2-3',
'TRP-AGG2-4', 'TRP-AGG2-5', 'TRP-AGG2-6', 'TRP-AGG2-7', 'TRP-AGG2-8', 'TRP-AGG3-1',
'TRP-AGG5-1', 'TRP-CGG1-1', 'TRP-CGG1-2', 'TRP-CGG1-3', 'TRP-CGG2-1', 'TRP-GGG1-1',
'TRP-TGG1-1', 'TRP-TGG2-1', 'TRP-TGG3-1', 'TRP-TGG3-2', 'TRP-TGG3-3', 'TRP-TGG3-4',
'TRP-TGG3-5', 'TRSUP-CTA1-1', 'TRSUP-CTA2-1', 'TRSUP-CTA3-1', 'TRSUP-TTA1-1', 'TRSUP-TTA2-1',
'TRSUP-TTA3-1')
# Create an empty data frame to store the test results
test_results <- data.frame(Expression_Type = character(),
Gene_group = character(),
Statistic = numeric(),
p_value = numeric(),
Functional_Sample_Count = integer(),
Pseudogene_Sample_Count = integer(),
stringsAsFactors = FALSE)
# Loop through each Expression type (folder)
for (expression in expression_types) {
# Create empty vectors for pooled functional and pseudogene data and sample counts
all_functional_genes <- c()
all_pseudogenes <- c()
# Loop through each gene group (e.g., RNU1, RNU2, etc.)
for (gene in gene_groups) {
# Construct the file path for the current expression type and gene group
file_path <- paste0("../../data/", expression, "-expr_summary/", gene, "_expr.csv")
# Check if the file exists
if (!file.exists(file_path)) {
cat("File does not exist for gene", gene, "in expression type", expression, "\n")
# Record the result with "Insufficient data" message in Statistic and p_value columns
test_results <- rbind(test_results, data.frame(Expression_Type = expression,
Gene_group = gene,
Statistic = NA,
p_value = NA,
Functional_Sample_Count = 0,
Pseudogene_Sample_Count = 0,
stringsAsFactors = FALSE))
next  # Skip to the next gene
}
# Read the data for the current gene group
data <- read_csv(file_path)
# Create a new column 'Gene_Type' to differentiate functional genes and pseudogenes
data <- data %>%
mutate(Gene_Type = case_when(
# First check for exception_genes_2, where genes with "P" are functional
Gene %in% exception_genes_2 ~ "Functional",
# Then check for exception_genes, where genes do not end with "P"
Gene %in% exception_genes ~ "Pseudogene",
# For genes that has "P" but not in exception_genes_2, classify as Pseudogene
grepl("P", Gene) ~ "Pseudogene",
# All other genes are considered Functional
TRUE ~ "Functional"
))
# Separate functional genes and pseudogenes
if(expression == 'GTEX'){
functional_genes <- data$`Max Expression`[data$Gene_Type == "Functional"]
pseudogenes <- data$`Max Expression`[data$Gene_Type == "Pseudogene"]
}else{
functional_genes <- data$`Max_FPKM`[data$Gene_Type == "Functional"]
pseudogenes <- data$`Max_FPKM`[data$Gene_Type == "Pseudogene"]
}
# Add to the pooled data for later testing
all_functional_genes <- c(all_functional_genes, functional_genes)
all_pseudogenes <- c(all_pseudogenes, pseudogenes)
# Count the sample sizes for functional genes and pseudogenes
functional_n <- length(functional_genes)
pseudogene_n <- length(pseudogenes)
# Always run the KS test for each gene group, regardless of the sample sizes
ks_result <- tryCatch({
ks.test(functional_genes, pseudogenes)
}, error = function(e) {
# If there's an error (e.g., because of too few data points), return NULL
NULL
})
# If KS test was successful, store the results, otherwise, store NA
if (!is.null(ks_result)) {
test_results <- rbind(test_results, data.frame(Expression_Type = expression,
Gene_group = gene,
Statistic = ks_result$statistic,
p_value = ks_result$p.value,
Functional_Sample_Count = functional_n,
Pseudogene_Sample_Count = pseudogene_n,
stringsAsFactors = FALSE))
} else {
test_results <- rbind(test_results, data.frame(Expression_Type = expression,
Gene_group = gene,
Statistic = NA,
p_value = NA,
Functional_Sample_Count = functional_n,
Pseudogene_Sample_Count = pseudogene_n,
stringsAsFactors = FALSE))
}
# Print a message indicating that the gene has been processed
cat("Processed:", gene, "\n")
}
# Perform the KS test on the pooled functional and pseudogene data
pooled_functional_n <- length(all_functional_genes)
pooled_pseudogene_n <- length(all_pseudogenes)
# Always run the KS test on pooled data, regardless of sample size
pooled_ks_result <- tryCatch({
ks.test(all_functional_genes, all_pseudogenes)
}, error = function(e) {
NULL
})
# If KS test on pooled data was successful, store the results, otherwise, store NA
if (!is.null(pooled_ks_result)) {
test_results <- rbind(test_results, data.frame(Expression_Type = expression,
Gene_group = "Pooled",
Statistic = pooled_ks_result$statistic,
p_value = pooled_ks_result$p.value,
Functional_Sample_Count = pooled_functional_n,
Pseudogene_Sample_Count = pooled_pseudogene_n,
stringsAsFactors = FALSE))
} else {
test_results <- rbind(test_results, data.frame(Expression_Type = expression,
Gene_group = "Pooled",
Statistic = NA,
p_value = NA,
Functional_Sample_Count = pooled_functional_n,
Pseudogene_Sample_Count = pooled_pseudogene_n,
stringsAsFactors = FALSE))
}
}
# Write the results into a CSV file
write.csv(test_results, "../../results/ks_test_expression_results.csv", row.names = FALSE)
# Test random data Kolmogorov-Smirnov test
x1 <- rnorm(100)
ks.test(x1, "pnorm")
library(dplyr)
# Set the directory where your files are located
data_dir <- "../../data/"
# List of gene groups
gene_groups <- c("RNU1", "RNU2", "RNU4", "RNU5", "RNU6", "RNU4ATAC",
"RNU6ATAC", "RNU11", "RNU12", "VTRNA", "RNY", "TRNA",
"RN7SL", "RNU7", "RN7SK")
# Define the list of exceptions (genes that are pseudogenes but do not end with "P",from TRNA gene groups)
exception_genes <- c('TRA-AGC23-1', 'TRA-TGC9-1', 'TRC-ACA1-1', 'TRC-GCA25-1', 'TRE-CTC7-1',
'TRE-CTC16-1', 'TRE-TTC6-1', 'TRE-TTC7-1', 'TRE-TTC8-1', 'TRE-TTC9-1',
'TRE-TTC10-1', 'TRE-TTC11-1', 'TRE-TTC12-1', 'TRE-TTC13-1', 'TRF-GAA7-1',
'TRF-GAA8-1', 'TRF-GAA9-1', 'TRF-GAA10-1', 'TRF-GAA11-1', 'TRF-GAA12-1',
'TRG-CCC8-1', 'TRG-TCC5-1', 'TRG-TCC6-1', 'TRI-AAT10-1', 'TRI-AAT11-1',
'TRK-CTT12-1', 'TRK-CTT13-1', 'TRK-CTT14-1', 'TRK-CTT15-1', 'TRK-CTT16-1',
'TRK-TTT10-1', 'TRK-TTT12-1', 'TRK-TTT13-1', 'TRK-TTT15-1', 'TRL-AAG6-1',
'TRL-AAG7-1', 'TRL-TAA5-1', 'TRL-TAG4-1', 'TRN-GTT16-5', 'TRN-GTT21-1',
'TRN-GTT22-1', 'TRN-GTT23-1', 'TRQ-CTG9-1', 'TRQ-CTG11-1', 'TRQ-CTG13-1',
'TRQ-CTG16-1', 'TRQ-CTG17-1', 'TRQ-TTG5-1', 'TRQ-TTG6-1', 'TRQ-TTG10-1',
'TRR-CCT6-1', 'TRR-CCT7-1', 'TRR-CCT9-1', 'TRS-ACT1-1', 'TRUND-NNN3-1',
'TRUND-NNN4-1', 'TRUND-NNN6-1', 'TRUND-NNN7-1', 'TRUND-NNN8-1', 'TRUND-NNN9-1',
'TRUND-NNN10-1', 'TRV-CAC11-1', 'TRV-CAC11-2', 'TRX-CAT3-1', 'TRY-GTA11-1',
'TRY-GTA12-1')
#Define list of 2nd exceptions: have P but are functional genes
exception_genes_2 <- c('MT-TP', 'NMTRP-TGG1-1', 'TRP-AGG1-1', 'TRP-AGG2-1', 'TRP-AGG2-2', 'TRP-AGG2-3',
'TRP-AGG2-4', 'TRP-AGG2-5', 'TRP-AGG2-6', 'TRP-AGG2-7', 'TRP-AGG2-8', 'TRP-AGG3-1',
'TRP-AGG5-1', 'TRP-CGG1-1', 'TRP-CGG1-2', 'TRP-CGG1-3', 'TRP-CGG2-1', 'TRP-GGG1-1',
'TRP-TGG1-1', 'TRP-TGG2-1', 'TRP-TGG3-1', 'TRP-TGG3-2', 'TRP-TGG3-3', 'TRP-TGG3-4',
'TRP-TGG3-5', 'TRSUP-CTA1-1', 'TRSUP-CTA2-1', 'TRSUP-CTA3-1', 'TRSUP-TTA1-1', 'TRSUP-TTA2-1',
'TRSUP-TTA3-1')
# Initialize an empty data frame to store the combined data
combined_data <- data.frame(Gene_group = character(),
PhastCons30_median = numeric(),
PhyloP100_median = numeric(),
PhyloP447_median = numeric(),
GTEX_max = numeric(),
ENCODE_max = numeric(),
Gene_type = character())
# Loop through each file, and add the median conservation and max expression into the combined_data frame
for (gene in gene_groups) {
# Construct file names based on the gene group
phastCons_file <- file.path(data_dir, paste0("phastCons30_summary/", gene, "_phastCons30_summary_metrics.csv"))
phyloP100_file <- file.path(data_dir, paste0("phyloP100_summary/", gene, "_phyloP100_summary_metrics.csv"))
phyloP447_file <- file.path(data_dir, paste0("phyloP447_summary/", gene, "_phyloP447_summary_metrics.csv"))
gtex_file <- file.path(data_dir, paste0("GTEX-expr_summary/", gene, "_expr.csv"))
encode_file <- file.path(data_dir, paste0("ENCODE-expr_summary/", gene, "_expr.csv"))
# Read the files
phastCons_data <- read.csv(phastCons_file)
phyloP100_data <- read.csv(phyloP100_file)
phyloP447_data <- read.csv(phyloP447_file)
gtex_data <- read.csv(gtex_file)
encode_data <- read.csv(encode_file)
# Filter or select only the median conservation columns
# For phastCons, phyloP100, and phyloP447, we'll assume columns are named "median" for median conservation
phastCons_data <- phastCons_data[, c("Gene", "Median_Conservation")]
phyloP100_data <- phyloP100_data[, c("Gene", "Median_Conservation")]
phyloP447_data <- phyloP447_data[, c("Gene", "Median_Conservation")]
gtex_data <- gtex_data[, c("Gene", "Max.Expression")]
encode_data <- encode_data[, c("Gene", "Max_FPKM")]
# Combine all data frames for this gene group
# Initialize gene_combined_data with phastCons_data
gene_combined_data <- phastCons_data
gene_combined_data <- merge(gene_combined_data, phyloP100_data, by = "Gene", all = TRUE)
gene_combined_data <- merge(gene_combined_data, phyloP447_data, by = "Gene", all = TRUE)
gene_combined_data <- merge(gene_combined_data, gtex_data, by = "Gene", all = TRUE)
gene_combined_data <- merge(gene_combined_data, encode_data, by = "Gene", all = TRUE)
# Rename columns to match the initial ones
colnames(gene_combined_data) <- c("Gene", "PhastCons30_median", "PhyloP100_median", "PhyloP447_median", "GTEX_max", "ENCODE_max")
# Create a new column 'Gene_Type' to differentiate functional genes and pseudogenes
gene_combined_data <- gene_combined_data %>%
mutate(Gene_Type = case_when(
# First check for exception_genes_2, where genes with "P" are functional
Gene %in% exception_genes_2 ~ "Functional",
# Then check for exception_genes, where genes do not end with "P"
Gene %in% exception_genes ~ "Pseudogene",
# For genes that has "P" but not in exception_genes_2, classify as Pseudogene
grepl("P", Gene) ~ "Pseudogene",
# All other genes are considered Functional
TRUE ~ "Functional"
))
# Append the combined gene data to the main combined data frame
gene_combined_data$Gene_group <- gene  # Add the gene group name
combined_data <- rbind(combined_data, gene_combined_data)
}
# Write the combined data to a CSV file
output_file <- "../../results/combined_gene_data.csv"  # Specify the file name and path
write.csv(combined_data, file = output_file, row.names = FALSE)
# View a message confirming the file has been written
cat("CSV file has been written to:", output_file, "\n")
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Data-loading step
data <- read.csv("../../results/combined_gene_data.csv")
# Define custom colors for each Gene_group and Gene_Type combination
custom_colors <- c(
"RNU1.Functional" = "#174a76",  # Darker, more saturated blue
"RNU1.Pseudogene" = "#7a99c4",  # More saturated, lighter blue
"RNU2.Functional" = "#9f1f1f",  # Deeper red
"RNU2.Pseudogene" = "#e54d4a",  # Richer red-pink
"RNU4.Functional" = "#d26b2c",  # Darker, more saturated yellow-orange
"RNU4.Pseudogene" = "#e4c039",  # Darker, richer yellow
"RNU5.Functional" = "#1b6f1b",  # Darker green
"RNU5.Pseudogene" = "#73b761",  # Richer, more saturated green
"RNU6.Functional" = "#5b3686",  # Darker, more vibrant purple
"RNU6.Pseudogene" = "#8e68b2",  # Darker, more saturated lavender
"RNU4ATAC.Functional" = "#6b3b32",  # Darker, warmer brown
"RNU4ATAC.Pseudogene" = "#9e7b66",  # More saturated light brown
"RNU6ATAC.Functional" = "#b04e90",  # Darker pinkish purple
"RNU6ATAC.Pseudogene" = "#e07fbb",  # Richer, more saturated pink
"RNU11.Functional" = "#4c4c4c",  # Darker grey
"RNU11.Pseudogene" = "#8f8f8f",  # Darker, richer grey
"RNU12.Functional" = "#8a7e1f",  # Darker, more saturated olive
"RNU12.Pseudogene" = "#9f9e00",  # Darker, richer yellow-green
"VTRNA.Functional" = "#137f8b",  # Deeper, more saturated teal
"VTRNA.Pseudogene" = "#6ba8bb",  # Richer, darker teal-blue
"RNY.Functional" = "#e5788a",  # Darker, deeper pink
"RNY.Pseudogene" = "#f35f7f",  # Richer, more saturated pink-red
"TRNA.Functional" = "#585858",  # Darker, richer grey
"TRNA.Pseudogene" = "#8e8e8e",  # More saturated grey
"RN7SL.Functional" = "#c57800",  # Darker, richer amber-orange
"RN7SL.Pseudogene" = "#d78f00",  # Darker, more saturated gold
"RNU7.Functional" = "#b48df5",  # Darker lavender purple
"RNU7.Pseudogene" = "#9d6ee0",  # Richer, darker purple
"RN7SK.Functional" = "#174a76",  # Same as RNU1 Functional
"RN7SK.Pseudogene" = "#4da7d8"   # Darker, more saturated light blue
)
# Clean the data: Remove rows with non-finite ENCODE_max
clean_data <- data %>%
filter(is.finite(ENCODE_max))
# Normalize data by Gene_group and Gene_Type
normalized_data <- clean_data %>%
group_by(Gene_group) %>%
mutate(
control_median = ifelse(
any(Gene_Type == "Pseudogene"),
median(ENCODE_max[Gene_Type == "Pseudogene"], na.rm = TRUE),
NA
),
control_mad = ifelse(
any(Gene_Type == "Pseudogene"),
mad(ENCODE_max[Gene_Type == "Pseudogene"], na.rm = TRUE),
1  # Default MAD to 1 to avoid division by zero
),
control_mad = ifelse(control_mad == 0, 1e-6, control_mad),  # Avoid MAD of 0 by using a small constant
Z_score = ifelse(
!is.na(control_median),
(ENCODE_max - control_median) / control_mad,
NA
)
) %>%
ungroup() %>%
mutate(Z_score = ifelse(is.finite(Z_score), Z_score, 0))  # Replace remaining non-finite values with 0
# Apply log transformation to Z-score
normalized_data <- normalized_data %>%
mutate(
Z_score_log = ifelse(
Z_score > 0, log10(Z_score + 1),  # Log-transform positive Z-scores
0  # Keep Z-scores <= 0 as 0
)
)
# Create Gene_Type_combined for all gene groups (not just the combined ones)
normalized_data <- normalized_data %>%
mutate(
Gene_Type_combined = paste(Gene_group, Gene_Type, sep = ".")  # Combine Gene_group and Gene_Type for color mapping
)
# Define the combined groups for RNU1, RNU2, RNU4, RNU5, and RNU6
combined_groups <- c("RNU1", "RNU2", "RNU4", "RNU5", "RNU6")
# Create combined data for the selected Gene_groups
combined_data <- normalized_data %>%
filter(Gene_group %in% combined_groups) %>%
mutate(
Gene_group = factor(Gene_group, levels = combined_groups),
Gene_Type_label = ifelse(Gene_Type == "Pseudogene", paste(Gene_group, "(P)"), paste(Gene_group, "(F)")),
Gene_Type_combined = paste(Gene_group, Gene_Type, sep = ".")  # Combine Gene_group and Gene_Type for color mapping
)
# Plot combined data with jitter points
combined_plot <- ggplot(combined_data, aes(x = Gene_Type_label, y = Z_score_log, color = Gene_Type_combined)) +
geom_jitter(width = 0.2, height = 0, size = 3, alpha = 0.7) +  # Use jitter instead of violin and boxplot
stat_summary(fun = "median", geom = "point", shape = 23, size = 3, fill = "white") +  # Highlight median
theme_minimal() +
labs(
title = "Gene Expression (ENCODE) of Major Spliceosomal RNAs",
x = "Gene Type",
y = "Z-score"
) +
scale_color_manual(values = custom_colors) +  # Apply custom colors
theme(
legend.position = "none",
plot.title = element_text(face = "bold", size = 22),  # Larger title font size
axis.title.x = element_text(size = 20),              # Larger x-axis label font size
axis.title.y = element_text(size = 20),              # Larger y-axis label font size
axis.text.x = element_text(size = 18, angle = 25, hjust = 1),    #Diagonal X axis text
axis.text.y = element_text(size = 18),                # Larger y-axis tick font size
text = element_text(family = "serif")  # Set font family to serif (Times New Roman)
)
# Save the combined jitter plot
ggsave(filename = "../../results/ENCODE_Z_combined_RNU1_RNU2_RNU4_RNU5_RNU6_jitter.pdf", plot = combined_plot, width = 12, height = 7)
# Define groups
combined_groups_2 <- c("RNU4ATAC", "RNU6ATAC", "RNU11", "RNU12")
remaining_ncRNAs <- setdiff(unique(normalized_data$Gene_group), c(combined_groups, combined_groups_2))
# --- Plot Combined Group 2 ---
# Filter combined data for the second group
combined_data_2 <- normalized_data %>%
filter(Gene_group %in% combined_groups_2) %>%
mutate(
Gene_group = factor(Gene_group, levels = combined_groups_2),
Gene_Type_label = ifelse(Gene_Type == "Pseudogene", paste(Gene_group, "(P)"), paste(Gene_group, "(F)")),
Gene_Type_combined = paste(Gene_group, Gene_Type, sep = ".")  # Combine Gene_group and Gene_Type for color mapping
)
# Ensure combined_data_2 has valid ENCODE_max values
combined_data_2 <- combined_data_2 %>%
mutate(
Z_score = ifelse(
Gene == "RNU12-2P",
ENCODE_max / ENCODE_max[Gene == "RNU12-2P"],  # Reference normalization
Z_score  # Keep the existing Z_score otherwise
),
# Log transformation for Z_score, using log1p to handle zero values safely
Z_score_log = ifelse(Z_score > 0, log(Z_score), 0)
)
# Plot combined group 2
combined_plot_2 <- ggplot(combined_data_2, aes(x = Gene_Type_label, y = Z_score_log, color = Gene_Type_combined)) +
geom_jitter(width = 0.2, height = 0, size = 3, alpha = 0.7) +  # Use jitter
stat_summary(fun = "median", geom = "point", shape = 23, size = 3, fill = "white") +  # Highlight median
theme_minimal() +
labs(
title = "Gene Expression (ENCODE) of Minor Spliceosomal RNAs",
x = "Gene Type",
y = "Z-score"
) +
scale_color_manual(values = custom_colors) +  # Apply custom colors
theme(
legend.position = "none",
plot.title = element_text(face = "bold", size = 22),  # Larger title font size
axis.title.x = element_text(size = 20),              # Larger x-axis label font size
axis.title.y = element_text(size = 20),              # Larger y-axis label font size
axis.text.x = element_text(size = 18, angle = 25, hjust = 1),    #Diagonal X axis text
axis.text.y = element_text(size = 18),                # Larger y-axis tick font size
text = element_text(family = "serif")  # Set font family to serif (Times New Roman)
)
# Save the combined plot for group 2
ggsave(filename = "../../results/ENCODE_Z_combined_RNU4ATAC_RNU6ATAC_RNU11_RNU12_jitter.pdf", plot = combined_plot_2, width = 12, height = 7)
# --- Plot Remaining ncRNAs ---
# Filter data for remaining ncRNAs
remaining_data <- normalized_data %>%
filter(Gene_group %in% remaining_ncRNAs) %>%
mutate(
Gene_Type_label = ifelse(Gene_Type == "Pseudogene", paste(Gene_group, "(P)"), paste(Gene_group, "(F)")),
Gene_Type_combined = paste(Gene_group, Gene_Type, sep = ".")  # Combine Gene_group and Gene_Type for color mapping
)
# Plot remaining ncRNAs
remaining_plot <- ggplot(remaining_data, aes(x = Gene_Type_label, y = Z_score_log, color = Gene_Type_combined)) +
geom_jitter(width = 0.2, height = 0, size = 3, alpha = 0.7) +  # Use jitter instead of violin and boxplot
stat_summary(fun = "median", geom = "point", shape = 23, size = 3, fill = "white") +  # Highlight median
theme_minimal() +
labs(
title = "Gene Expression (ENCODE) of other sncRNAs",
x = "Gene Type",
y = "Z-score"
) +
scale_color_manual(values = custom_colors) +  # Apply custom colors
theme(
legend.position = "none",
plot.title = element_text(face = "bold", size = 22),  # Larger title font size
axis.title.x = element_text(size = 20),              # Larger x-axis label font size
axis.title.y = element_text(size = 20),              # Larger y-axis label font size
axis.text.x = element_text(size = 18, angle = 25, hjust = 1),    #Diagonal X axis text
axis.text.y = element_text(size = 18),                # Larger y-axis tick font size
text = element_text(family = "serif")  # Set font family to serif (Times New Roman)
)
# Save the plot for remaining ncRNAs
ggsave(filename = "../../results/ENCODE_Z_remaining_ncRNAs_jitter.pdf", plot = remaining_plot, width = 12, height = 7)
library(readr)
combined_gene_data <- read_csv("~/Documents/ncRNA-pseudogenes/results/combined_gene_data.csv")
View(combined_gene_data)
