# Remove rows with NA values in the Score column
RNU4_cons_clean <- RNU4_cons[!is.na(RNU4_cons$Score), ]
# 1. Extract the numeric part from the Gene column
RNU4_cons_clean$Gene_number <- as.numeric(gsub("RNU4-(\\d+)P?", "\\1", RNU4_cons_clean$Gene))
# 4. Reorder the Gene factor based on the extracted number
RNU4_cons_clean$Gene <- factor(RNU4_cons_clean$Gene, levels = unique(RNU4_cons_clean$Gene[order(RNU4_cons_clean$Gene_number)]))
# Create the plot
plot_RNU4 <- ggplot(RNU4_cons_clean, aes(x = Score, y = Gene)) +
geom_boxplot(fill = "lightyellow", color = "black") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 8)) +
labs(title = "Distribution of Scores by Gene (Ordered)",
x = "Score",
y = "Gene") +
theme_minimal()
# Save the plot to a file
ggsave("RNU4_score_plot_vertical_labels_large.pdf", plot = plot_RNU4, width = 12, height = 8)
# Load necessary libraries
library(readr)
library(ggplot2)
# Load data
RNU4_cons <- read_csv("../../data/RNU4_cons.csv")
# View the data (optional, remove if running in a non-interactive environment)
# View(RNU4_cons)
# Remove rows with NA values in the Score column
RNU4_cons_clean <- RNU4_cons[!is.na(RNU4_cons$Score), ]
# 1. Extract the numeric part from the Gene column
RNU4_cons_clean$Gene_number <- as.numeric(gsub("RNU4-(\\d+)P?", "\\1", RNU4_cons_clean$Gene))
# 4. Reorder the Gene factor based on the extracted number
RNU4_cons_clean$Gene <- factor(RNU4_cons_clean$Gene, levels = unique(RNU4_cons_clean$Gene[order(RNU4_cons_clean$Gene_number)]))
# Create the plot
plot_RNU4 <- ggplot(RNU4_cons_clean, aes(x = Score, y = Gene)) +
geom_boxplot(fill = "lightyellow", color = "black") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 8)) +
labs(title = "Distribution of Scores by Gene (Ordered)",
x = "Score",
y = "Gene") +
theme_minimal()
# Save the plot to a file
ggsave("../../results/RNU4_score_plot_vertical_labels_large.pdf", plot = plot_RNU4, width = 12, height = 8)
# Load necessary libraries
library(readr)
library(ggplot2)
# Load data
RNU5_cons <- read_csv("../../data/RNU5_cons.csv")
# View the data (optional, remove if running in a non-interactive environment)
# View(RNU5_cons)
# Remove rows with NA values in the Score column
RNU5_cons_clean <- RNU5_cons[!is.na(RNU5_cons$Score), ]
# Step 1: Separate gene into letter and number parts
RNU5_cons_clean$Gene_letter <- gsub("RNU5([A-Z]+)-.*", "\\1", RNU5_cons_clean$Gene)
RNU5_cons_clean$Gene_number <- gsub("RNU5[A-Z]+-(\\d+P?)", "\\1", RNU5_cons_clean$Gene)
# Step 2: Extract numeric part and "P" status for sorting
RNU5_cons_clean$Numeric_part <- as.numeric(gsub("P", "", RNU5_cons_clean$Gene_number)) # numeric portion only
RNU5_cons_clean$Has_P <- grepl("P$", RNU5_cons_clean$Gene_number) # logical column for "P" status
# Step 3: Sort by Gene_letter, then Numeric_part, then Has_P (to prioritize non-P over P)
RNU5_cons_clean <- RNU5_cons_clean[order(RNU5_cons_clean$Gene_letter,
RNU5_cons_clean$Numeric_part,
RNU5_cons_clean$Has_P), ]
# Step 4: Optional - Drop intermediate columns if needed
RNU5_cons_clean$Numeric_part <- NULL
RNU5_cons_clean$Has_P <- NULL
# Create the plot
plot_RNU5 <- ggplot(RNU5_cons_clean, aes(x = Score, y = Gene)) +
geom_boxplot(fill = "lightblue", color = "black") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 8)) +
labs(title = "Distribution of Scores by Gene (Ordered)",
x = "Score",
y = "Gene") +
theme_minimal()
# Save the plot to a file
ggsave("../../results/RNU5_score_plot_vertical_labels_large.pdf", plot = plot_RNU5, width = 12, height = 8)
# Load necessary libraries
library(readr)
library(ggplot2)
# Load data
RNU2_cons <- read_csv("../../data/RNU2_cons.csv")
# View the data (optional, remove if running in a non-interactive environment)
# View(RNU2_cons)
# Remove rows with NA values in the Score column
RNU2_cons_clean <- RNU2_cons[!is.na(RNU2_cons$Score), ]
# 1. Extract the numeric part from the Gene column
RNU2_cons_clean$Gene_number <- as.numeric(gsub("RNU2-(\\d+)P?", "\\1", RNU2_cons_clean$Gene))
# 2. Reorder the Gene factor based on the extracted number
RNU2_cons_clean$Gene <- factor(RNU2_cons_clean$Gene, levels = unique(RNU2_cons_clean$Gene[order(RNU2_cons_clean$Gene_number)]))
# Create the plot
plot_RNU2 <- ggplot(RNU2_cons_clean, aes(x = Score, y = Gene)) +
geom_boxplot(fill = "lightblue", color = "black") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 8)) +
labs(title = "Distribution of Scores by Gene (Ordered)",
x = "Score",
y = "Gene") +
theme_minimal()
# Save the plot to a file
ggsave("../../results/RNU2_score_plot_vertical_labels_large.pdf", plot = plot_RNU2, width = 12, height = 8)
# Load necessary libraries
library(readr)
library(ggplot2)
# Load data
RNU5_cons <- read_csv("../../data/RNU5_cons.csv")
# View the data (optional, remove if running in a non-interactive environment)
# View(RNU5_cons)
# Remove rows with NA values in the Score column
RNU5_cons_clean <- RNU5_cons[!is.na(RNU5_cons$Score), ]
# Step 1: Separate gene into letter and number parts
RNU5_cons_clean$Gene_letter <- gsub("RNU5([A-Z]+)-.*", "\\1", RNU5_cons_clean$Gene)
RNU5_cons_clean$Gene_number <- gsub("RNU5[A-Z]+-(\\d+P?)", "\\1", RNU5_cons_clean$Gene)
# Step 2: Extract numeric part and "P" status for sorting
RNU5_cons_clean$Numeric_part <- as.numeric(gsub("P", "", RNU5_cons_clean$Gene_number)) # numeric portion only
RNU5_cons_clean$Has_P <- grepl("P$", RNU5_cons_clean$Gene_number) # logical column for "P" status
# Step 3: Sort by Gene_letter, then Numeric_part, then Has_P (to prioritize non-P over P)
RNU5_cons_clean <- RNU5_cons_clean[order(RNU5_cons_clean$Gene_letter,
RNU5_cons_clean$Numeric_part,
RNU5_cons_clean$Has_P), ]
# Step 4: Optional - Drop intermediate columns if needed
RNU5_cons_clean$Numeric_part <- NULL
RNU5_cons_clean$Has_P <- NULL
# Create the plot
plot_RNU5 <- ggplot(RNU5_cons_clean, aes(x = Score, y = Gene)) +
geom_boxplot(fill = "lightgreen", color = "black") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 8)) +
labs(title = "Distribution of Scores by Gene (Ordered)",
x = "Score",
y = "Gene") +
theme_minimal()
# Save the plot to a file
ggsave("../../results/RNU5_score_plot_vertical_labels_large.pdf", plot = plot_RNU5, width = 12, height = 8)
rm(plot)
rm(mean_score)
rm(sd_score)
rm all
rm(list = ls())
# Load necessary libraries
library(readr)
library(ggplot2)
library(dplyr)
# Define the dataset names and corresponding colors
datasets <- c("RNU1", "RNU2", "RNU4")
colors <- c("lightblue", "lightpink", "lightyellow")  # Customize the colors as needed
# Loop through each dataset
for (i in seq_along(datasets)) {
# Get dataset and color for the current iteration
dataset <- datasets[i]
plot_color <- colors[i]
# Construct the file path for the dataset and the plot
data_path <- paste0("../../data/", dataset, "_cons.csv")
plot_path <- paste0("../../results/", dataset, "_score_plot_vertical_labels_large.pdf")
# Load data
dataset_cons <- read_csv(data_path)
# Remove rows with NA values in the Score column
dataset_cons_clean <- dataset_cons[!is.na(dataset_cons$Score), ]
# 1. Extract the numeric part from the Gene column
dataset_cons_clean$Gene_number <- as.numeric(gsub(paste0(dataset, "-(\\d+)P?"), "\\1", dataset_cons_clean$Gene))
# 2. Reorder the Gene factor based on the extracted number
dataset_cons_clean$Gene <- factor(dataset_cons_clean$Gene, levels = unique(dataset_cons_clean$Gene[order(dataset_cons_clean$Gene_number)]))
# Calculate summary metrics: median and max conservation for each gene
summary_metrics <- dataset_cons_clean %>%
group_by(Gene) %>%
summarise(
Median_Conservation = median(Score, na.rm = TRUE),
Max_Conservation = max(Score, na.rm = TRUE)
)
# Optionally, print the summary metrics to the console
print(summary_metrics)
# Create the plot with a unique color for each dataset
plot <- ggplot(dataset_cons_clean, aes(x = Score, y = Gene)) +
geom_boxplot(fill = plot_color, color = "black") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 8)) +
labs(title = paste("Distribution of Scores by Gene (Ordered) for", dataset),
x = "Score",
y = "Gene") +
theme_minimal()
# Save the plot to a file
ggsave(plot_path, plot = plot, width = 12, height = 8)
# Optionally: Save summary metrics to a CSV file for each dataset
summary_file <- paste0("../../results/", dataset, "_summary_metrics.csv")
write_csv(summary_metrics, summary_file)
}
View(summary_metrics)
# Load necessary libraries
library(readr)
library(ggplot2)
library(dplyr)
# Define the dataset names and corresponding colors
datasets <- c("RNU1", "RNU2", "RNU4")
colors <- c("lightblue", "lightpink", "lightyellow")  # Customize the colors as needed
# Loop through each dataset
for (i in seq_along(datasets)) {
# Get dataset and color for the current iteration
dataset <- datasets[i]
plot_color <- colors[i]
# Construct the file path for the dataset and the plot
data_path <- paste0("../../data/", dataset, "_cons.csv")
plot_path <- paste0("../../results/", dataset, "_score_plot.pdf")
# Load data
dataset_cons <- read_csv(data_path)
# Remove rows with NA values in the Score column
dataset_cons_clean <- dataset_cons[!is.na(dataset_cons$Score), ]
# 1. Extract the numeric part from the Gene column
dataset_cons_clean$Gene_number <- as.numeric(gsub(paste0(dataset, "-(\\d+)P?"), "\\1", dataset_cons_clean$Gene))
# 2. Reorder the Gene factor based on the extracted number
dataset_cons_clean$Gene <- factor(dataset_cons_clean$Gene, levels = unique(dataset_cons_clean$Gene[order(dataset_cons_clean$Gene_number)]))
# Calculate summary metrics: median and max conservation for each gene
summary_metrics <- dataset_cons_clean %>%
group_by(Gene) %>%
summarise(
Median_Conservation = median(Score, na.rm = TRUE),
Max_Conservation = max(Score, na.rm = TRUE)
)
# Optionally, print the summary metrics to the console
print(summary_metrics)
# Create the plot with a unique color for each dataset
plot <- ggplot(dataset_cons_clean, aes(x = Score, y = Gene)) +
geom_boxplot(fill = plot_color, color = "black") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 8)) +
labs(title = paste("Distribution of Scores by Gene (Ordered) for", dataset),
x = "Score",
y = "Gene") +
theme_minimal()
# Save the plot to a file
ggsave(plot_path, plot = plot, width = 12, height = 8)
# Optionally: Save summary metrics to a CSV file for each dataset
summary_file <- paste0("../../results/", dataset, "_summary_metrics.csv")
write_csv(summary_metrics, summary_file)
}
# Load necessary libraries
library(readr)
library(ggplot2)
library(dplyr)
# Load data
RNU5_cons <- read_csv("../../data/RNU5_cons.csv")
# View the data (optional, remove if running in a non-interactive environment)
# View(RNU5_cons)
# Remove rows with NA values in the Score column
RNU5_cons_clean <- RNU5_cons[!is.na(RNU5_cons$Score), ]
# Step 1: Separate gene into letter and number parts
RNU5_cons_clean$Gene_letter <- gsub("RNU5([A-Z]+)-.*", "\\1", RNU5_cons_clean$Gene)
RNU5_cons_clean$Gene_number <- gsub("RNU5[A-Z]+-(\\d+P?)", "\\1", RNU5_cons_clean$Gene)
# Step 2: Extract numeric part and "P" status for sorting
RNU5_cons_clean$Numeric_part <- as.numeric(gsub("P", "", RNU5_cons_clean$Gene_number)) # numeric portion only
RNU5_cons_clean$Has_P <- grepl("P$", RNU5_cons_clean$Gene_number) # logical column for "P" status
# Step 3: Sort by Gene_letter, then Numeric_part, then Has_P (to prioritize non-P over P)
RNU5_cons_clean <- RNU5_cons_clean[order(RNU5_cons_clean$Gene_letter,
RNU5_cons_clean$Numeric_part,
RNU5_cons_clean$Has_P), ]
# Step 4: Optional - Drop intermediate columns if needed
RNU5_cons_clean$Numeric_part <- NULL
RNU5_cons_clean$Has_P <- NULL
# Calculate summary metrics: median and max conservation for each gene
summary_metrics_RNU5 <- RNU5_cons_clean %>%
group_by(Gene) %>%
summarise(
Median_Conservation = median(Score, na.rm = TRUE),
Max_Conservation = max(Score, na.rm = TRUE)
)
# Optionally, print the summary metrics to the console
print(summary_metrics_RNU5)
# Create the plot
plot_RNU5 <- ggplot(RNU5_cons_clean, aes(x = Score, y = Gene)) +
geom_boxplot(fill = "lightgreen", color = "black") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 8)) +
labs(title = "Distribution of Scores by Gene (Ordered)",
x = "Score",
y = "Gene") +
theme_minimal()
# Optionally: Add annotations to the plot for median and max values
plot_RNU5 <- plot_RNU5 +
geom_text(data = summary_metrics_RNU5,
aes(x = Max_Conservation, y = Gene,
label = paste("Max:", round(Max_Conservation, 2), "\nMed:", round(Median_Conservation, 2))),
hjust = -0.2, size = 3, color = "black")
# Save the plot to a file
ggsave("../../results/RNU5_score_plot_vertical_labels_large.pdf", plot = plot_RNU5, width = 12, height = 8)
# Optionally: Save summary metrics to a CSV file for RNU5
write_csv(summary_metrics_RNU5, "../../results/RNU5_summary_metrics.csv")
# Load necessary libraries
library(readr)
library(ggplot2)
library(dplyr)
# Load data
RNU5_cons <- read_csv("../../data/RNU5_cons.csv")
# View the data (optional, remove if running in a non-interactive environment)
# View(RNU5_cons)
# Remove rows with NA values in the Score column
RNU5_cons_clean <- RNU5_cons[!is.na(RNU5_cons$Score), ]
# Step 1: Separate gene into letter and number parts
RNU5_cons_clean$Gene_letter <- gsub("RNU5([A-Z]+)-.*", "\\1", RNU5_cons_clean$Gene)
RNU5_cons_clean$Gene_number <- gsub("RNU5[A-Z]+-(\\d+P?)", "\\1", RNU5_cons_clean$Gene)
# Step 2: Extract numeric part and "P" status for sorting
RNU5_cons_clean$Numeric_part <- as.numeric(gsub("P", "", RNU5_cons_clean$Gene_number)) # numeric portion only
RNU5_cons_clean$Has_P <- grepl("P$", RNU5_cons_clean$Gene_number) # logical column for "P" status
# Step 3: Sort by Gene_letter, then Numeric_part, then Has_P (to prioritize non-P over P)
RNU5_cons_clean <- RNU5_cons_clean[order(RNU5_cons_clean$Gene_letter,
RNU5_cons_clean$Numeric_part,
RNU5_cons_clean$Has_P), ]
# Step 4: Optional - Drop intermediate columns if needed
RNU5_cons_clean$Numeric_part <- NULL
RNU5_cons_clean$Has_P <- NULL
# Calculate summary metrics: median and max conservation for each gene
summary_metrics_RNU5 <- RNU5_cons_clean %>%
group_by(Gene) %>%
summarise(
Median_Conservation = median(Score, na.rm = TRUE),
Max_Conservation = max(Score, na.rm = TRUE)
)
# Optionally, print the summary metrics to the console
print(summary_metrics_RNU5)
# Create the plot
plot_RNU5 <- ggplot(RNU5_cons_clean, aes(x = Score, y = Gene)) +
geom_boxplot(fill = "lightgreen", color = "black") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 8)) +
labs(title = "Distribution of Scores by Gene (Ordered)",
x = "Score",
y = "Gene") +
theme_minimal()
# Optionally: Add annotations to the plot for median and max values
plot_RNU5 <- plot_RNU5 +
geom_text(data = summary_metrics_RNU5,
aes(x = Max_Conservation, y = Gene,
label = paste("Max:", round(Max_Conservation, 2), "\nMed:", round(Median_Conservation, 2))),
hjust = -0.2, size = 3, color = "black")
# Save the plot to a file
ggsave("../../results/RNU5_score_plot.pdf", plot = plot_RNU5, width = 12, height = 8)
# Optionally: Save summary metrics to a CSV file for RNU5
write_csv(summary_metrics_RNU5, "../../results/RNU5_summary_metrics.csv")
# Load necessary libraries
library(readr)
library(ggplot2)
library(dplyr)
# Load data
RNU5_cons <- read_csv("../../data/RNU5_cons.csv")
# View the data (optional, remove if running in a non-interactive environment)
# View(RNU5_cons)
# Remove rows with NA values in the Score column
RNU5_cons_clean <- RNU5_cons[!is.na(RNU5_cons$Score), ]
# Step 1: Separate gene into letter and number parts
RNU5_cons_clean$Gene_letter <- gsub("RNU5([A-Z]+)-.*", "\\1", RNU5_cons_clean$Gene)
RNU5_cons_clean$Gene_number <- gsub("RNU5[A-Z]+-(\\d+P?)", "\\1", RNU5_cons_clean$Gene)
# Step 2: Extract numeric part and "P" status for sorting
RNU5_cons_clean$Numeric_part <- as.numeric(gsub("P", "", RNU5_cons_clean$Gene_number)) # numeric portion only
RNU5_cons_clean$Has_P <- grepl("P$", RNU5_cons_clean$Gene_number) # logical column for "P" status
# Step 3: Sort by Gene_letter, then Numeric_part, then Has_P (to prioritize non-P over P)
RNU5_cons_clean <- RNU5_cons_clean[order(RNU5_cons_clean$Gene_letter,
RNU5_cons_clean$Numeric_part,
RNU5_cons_clean$Has_P), ]
# Step 4: Optional - Drop intermediate columns if needed
RNU5_cons_clean$Numeric_part <- NULL
RNU5_cons_clean$Has_P <- NULL
# Calculate summary metrics: median and max conservation for each gene
summary_metrics_RNU5 <- RNU5_cons_clean %>%
group_by(Gene) %>%
summarise(
Median_Conservation = median(Score, na.rm = TRUE),
Max_Conservation = max(Score, na.rm = TRUE)
)
# Optionally, print the summary metrics to the console
print(summary_metrics_RNU5)
# Create the plot (no summary metrics on plot)
plot_RNU5 <- ggplot(RNU5_cons_clean, aes(x = Score, y = Gene)) +
geom_boxplot(fill = "lightgreen", color = "black") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 8)) +
labs(title = "Distribution of Scores by Gene (Ordered)",
x = "Score",
y = "Gene") +
theme_minimal()
# Save the plot to a file
ggsave("../../results/RNU5_score_plot_vertical_labels_large.pdf", plot = plot_RNU5, width = 12, height = 8)
# Optionally: Save summary metrics to a CSV file for RNU5
write_csv(summary_metrics_RNU5, "../../results/RNU5_summary_metrics.csv")
# Load necessary libraries
library(readr)
library(ggplot2)
library(dplyr)
# Load data
RNU5_cons <- read_csv("../../data/RNU5_cons.csv")
# View the data (optional, remove if running in a non-interactive environment)
# View(RNU5_cons)
# Remove rows with NA values in the Score column
RNU5_cons_clean <- RNU5_cons[!is.na(RNU5_cons$Score), ]
# Step 1: Separate gene into letter and number parts
RNU5_cons_clean$Gene_letter <- gsub("RNU5([A-Z]+)-.*", "\\1", RNU5_cons_clean$Gene)
RNU5_cons_clean$Gene_number <- gsub("RNU5[A-Z]+-(\\d+P?)", "\\1", RNU5_cons_clean$Gene)
# Step 2: Extract numeric part and "P" status for sorting
RNU5_cons_clean$Numeric_part <- as.numeric(gsub("P", "", RNU5_cons_clean$Gene_number)) # numeric portion only
RNU5_cons_clean$Has_P <- grepl("P$", RNU5_cons_clean$Gene_number) # logical column for "P" status
# Step 3: Sort by Gene_letter, then Numeric_part, then Has_P (to prioritize non-P over P)
RNU5_cons_clean <- RNU5_cons_clean[order(RNU5_cons_clean$Gene_letter,
RNU5_cons_clean$Numeric_part,
RNU5_cons_clean$Has_P), ]
# Step 4: Optional - Drop intermediate columns if needed
RNU5_cons_clean$Numeric_part <- NULL
RNU5_cons_clean$Has_P <- NULL
# Calculate summary metrics: median and max conservation for each gene
summary_metrics_RNU5 <- RNU5_cons_clean %>%
group_by(Gene) %>%
summarise(
Median_Conservation = median(Score, na.rm = TRUE),
Max_Conservation = max(Score, na.rm = TRUE)
)
# Optionally, print the summary metrics to the console
print(summary_metrics_RNU5)
# Create the plot (no summary metrics on plot)
plot_RNU5 <- ggplot(RNU5_cons_clean, aes(x = Score, y = Gene)) +
geom_boxplot(fill = "lightgreen", color = "black") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 8)) +
labs(title = "Distribution of Scores by Gene (Ordered)",
x = "Score",
y = "Gene") +
theme_minimal()
# Save the plot to a file
ggsave("../../results/RNU5_score_plot.pdf", plot = plot_RNU5, width = 12, height = 8)
# Optionally: Save summary metrics to a CSV file for RNU5
write_csv(summary_metrics_RNU5, "../../results/RNU5_summary_metrics.csv")
# Load necessary libraries
library(readr)
library(ggplot2)
library(dplyr)
# Define the dataset names and corresponding colors
datasets <- c("RNU1", "RNU2", "RNU4", "RNU6")
colors <- c("lightblue", "lightpink", "lightyellow", "plum2")  # Customize the colors as needed
# Loop through each dataset
for (i in seq_along(datasets)) {
# Get dataset and color for the current iteration
dataset <- datasets[i]
plot_color <- colors[i]
# Construct the file path for the dataset and the plot
data_path <- paste0("../../data/", dataset, "_cons.csv")
plot_path <- paste0("../../results/", dataset, "_score_plot.pdf")
# Load data
dataset_cons <- read_csv(data_path)
# Remove rows with NA values in the Score column
dataset_cons_clean <- dataset_cons[!is.na(dataset_cons$Score), ]
# 1. Extract the numeric part from the Gene column
dataset_cons_clean$Gene_number <- as.numeric(gsub(paste0(dataset, "-(\\d+)P?"), "\\1", dataset_cons_clean$Gene))
# 2. Reorder the Gene factor based on the extracted number
dataset_cons_clean$Gene <- factor(dataset_cons_clean$Gene, levels = unique(dataset_cons_clean$Gene[order(dataset_cons_clean$Gene_number)]))
# Calculate summary metrics: median and max conservation for each gene
summary_metrics <- dataset_cons_clean %>%
group_by(Gene) %>%
summarise(
Median_Conservation = median(Score, na.rm = TRUE),
Max_Conservation = max(Score, na.rm = TRUE)
)
# Optionally, print the summary metrics to the console
print(summary_metrics)
# Create the plot with a unique color for each dataset
plot <- ggplot(dataset_cons_clean, aes(x = Score, y = Gene)) +
geom_boxplot(fill = plot_color, color = "black") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 8)) +
labs(title = paste("Distribution of Scores by Gene (Ordered) for", dataset),
x = "Score",
y = "Gene") +
theme_minimal()
# Save the plot to a file
ggsave(plot_path, plot = plot, width = 12, height = 8)
# Optionally: Save summary metrics to a CSV file for each dataset
summary_file <- paste0("../../results/", dataset, "_summary_metrics.csv")
write_csv(summary_metrics, summary_file)
}
ggsave(plot_path, plot = plot, width = 12, height = 50)
ggsave(plot_path, plot = plot, width = 12, height = 20)
limitsize = FALSE
ggsave(plot_path, plot = plot, width = 12, height = 50)
ggsave(plot_path, plot = plot, width = 12, height = 50 limitsize= FLASE)
ggsave(plot_path, plot = plot, width = 12, height = 50 limitsize= FALSE)
ggsave(plot_path, plot = plot, width = 12, height = 50, limitsize= FALSE)
ggsave(plot_path, plot = plot, width = 12, height = 100, limitsize= FALSE)
# Load necessary libraries
library(readr)
library(ggplot2)
library(dplyr)
# Define the dataset names and corresponding colors
datasets <- c("RNU1", "RNU2", "RNU4")
colors <- c("lightblue", "lightpink", "lightyellow", "plum2")  # Customize the colors as needed
# Loop through each dataset
for (i in seq_along(datasets)) {
# Get dataset and color for the current iteration
dataset <- datasets[i]
plot_color <- colors[i]
# Construct the file path for the dataset and the plot
data_path <- paste0("../../data/", dataset, "_cons.csv")
plot_path <- paste0("../../results/", dataset, "_score_plot.pdf")
# Load data
dataset_cons <- read_csv(data_path)
# Remove rows with NA values in the Score column
dataset_cons_clean <- dataset_cons[!is.na(dataset_cons$Score), ]
# 1. Extract the numeric part from the Gene column
dataset_cons_clean$Gene_number <- as.numeric(gsub(paste0(dataset, "-(\\d+)P?"), "\\1", dataset_cons_clean$Gene))
# 2. Reorder the Gene factor based on the extracted number
dataset_cons_clean$Gene <- factor(dataset_cons_clean$Gene, levels = unique(dataset_cons_clean$Gene[order(dataset_cons_clean$Gene_number)]))
# Calculate summary metrics: median and max conservation for each gene
summary_metrics <- dataset_cons_clean %>%
group_by(Gene) %>%
summarise(
Median_Conservation = median(Score, na.rm = TRUE),
Max_Conservation = max(Score, na.rm = TRUE)
)
# Optionally, print the summary metrics to the console
print(summary_metrics)
# Create the plot with a unique color for each dataset
plot <- ggplot(dataset_cons_clean, aes(x = Score, y = Gene)) +
geom_boxplot(fill = plot_color, color = "black") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 8)) +
labs(title = paste("Distribution of Scores by Gene (Ordered) for", dataset),
x = "Score",
y = "Gene") +
theme_minimal()
# Save the plot to a file
ggsave(plot_path, plot = plot, width = 12, height = 20)
# Optionally: Save summary metrics to a CSV file for each dataset
summary_file <- paste0("../../results/", dataset, "_summary_metrics.csv")
write_csv(summary_metrics, summary_file)
}
