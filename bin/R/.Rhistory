theme_minimal() +
geom_line(data = density_median_df, aes(x = x, y = y), color = colors[i]) +  # Add density curve
geom_text_repel(data = label_data,
aes(x = Median_Conservation, y = pmax(minimum_y, 0), label = Gene,  # Ensure y >= 0.1
color = label_color, fontface = fontface),
nudge_y = 0,   # Nudge labels slightly above the points
box.padding = 0.5,      # Add padding around each label
direction = "y",   # Stack vertically
max.overlaps = 200,  # Allow overlap of up to 200 labels
segment.size = 0,    # Remove the connecting lines between the labels
segment.color = NA,  # Ensure no segment lines are drawn
alpha = 0.7,
force = 1,          # Adjust the repelling strength for better stacking
nudge_x = 0)        # Avoid horizontal nudging so labels stay aligned vertically
# Save the median plot with the appropriate file name
ggsave(paste0("../../results/rough-plots/", datasets[i], "_phastCons30_Median_Conservation_Distribution_Labeled.pdf"),
plot = median_plot, width = 15, height = 6)
# Plot Median Conservation without gene labels
median_plot_no_labels <- ggplot(data, aes(x = Median_Conservation)) +
geom_histogram(fill = colors[i], alpha = 0.8) +
labs(title = paste("Distribution of Median Conservation for", datasets[i]),
x = "Median Conservation",
y = "Density") +
theme_minimal() +
geom_line(data = density_median_df, aes(x = x, y = y), color = colors[i])  # Add density curve
# Save the median plot without labels
ggsave(paste0("../../results/rough-plots/unlabeled/", datasets[i], "_phastCons30_Median_Conservation_Distribution.pdf"),
plot = median_plot_no_labels, width = 15, height = 6)
# Plot Max Conservation with non-overlapping gene labels for high values
max_plot <- ggplot(data, aes(x = Max_Conservation)) +
geom_histogram(fill = colors[i], alpha = 0.8) +
labs(title = paste("Distribution of Max Conservation for", datasets[i]),
x = "Max Conservation",
y = "Density") +
theme_minimal() +
geom_line(data = density_max_df, aes(x = x, y = y), color = colors[i]) +  # Add density curve
geom_text_repel(data = label_data,
aes(x = Max_Conservation, y = pmax(minimum_y, 0), label = Gene,  # Ensure y >= 0.1
color = label_color, fontface = fontface),
nudge_y = 0,   # Nudge labels slightly above the points
box.padding = 0.5,      # Add padding around each label
direction = "y",   # Stack vertically
max.overlaps = 200,  # Allow overlap of up to 200 labels
segment.size = 0,    # Remove the connecting lines between the labels
segment.color = NA,  # Ensure no segment lines are drawn
alpha = 0.7,
force = 1,          # Adjust the repelling strength for better stacking
nudge_x = 0)        # Avoid horizontal nudging so labels stay aligned vertically
# Save the max plot with the appropriate file name
ggsave(paste0("../../results/rough-plots/", datasets[i], "_phastCons30_Max_Conservation_Distribution_Labeled.pdf"),
plot = max_plot, width = 15, height = 6)
# Plot Max Conservation without gene labels
max_plot_no_labels <- ggplot(data, aes(x = Max_Conservation)) +
geom_histogram(fill = colors[i], alpha = 0.8) +
labs(title = paste("Distribution of Max Conservation for", datasets[i]),
x = "Max Conservation",
y = "Density") +
theme_minimal() +
geom_line(data = density_max_df, aes(x = x, y = y), color = colors[i])  # Add density curve
# Save the max plot without labels
ggsave(paste0("../../results/rough-plots/unlabeled/", datasets[i], "_phastCons30_Max_Conservation_Distribution.pdf"),
plot = max_plot_no_labels, width = 15, height = 6)
}
# Load required libraries
library(ggplot2)
library(ggrepel)  # For non-overlapping labels
library(dplyr)    # For data manipulation
library(stringr)
# List of datasets and corresponding colors
datasets <- c("RNU1", "RNU2", "RNU4", "RNU5", "RNU6")
colors <- c("cornflowerblue", "firebrick2", "goldenrod1", "mediumseagreen", "mediumorchid2")  # Different colors for each dataset
# Loop through each dataset
for (i in 1:length(datasets)) {
# Load the data from the CSV file for the current dataset
# Assuming your files are named "RNU1_expr.csv", "RNU2_expr.csv", etc.
data <- read.csv(paste0("../../data/", datasets[i], "_expr.csv"))
#calculate 10% of the count
minimum_y <- nrow(data) * 0.05
# Calculate thresholds for high max expression (2 standard deviations above the mean)
mean_expr <- mean(data$Max.Expression, na.rm = TRUE)
sd_expr <- sd(data$Max.Expression, na.rm = TRUE)
high_expr_threshold <- mean_expr + 2 * sd_expr
# Filter data for genes with high max expression
label_data <- data %>%
filter(Max.Expression > high_expr_threshold)
# Create a new column for styling: check if 'Gene' does not contain a "P"
label_data <- label_data %>%
mutate(is_bold = !str_detect(Gene, "P"),  # TRUE if 'Gene' does not contain "P"
label_color = if_else(is_bold, "Gene", "Pseudogene"),  # Set color to blue if not "P"
fontface = if_else(is_bold, "bold", "plain"))  # Set fontface to bold if not "P"
# Create the density plot for Max Expression without labels
max_expr_plot_no_labels <- ggplot(data, aes(x = Max.Expression)) +
geom_histogram(fill = colors[i], color = colors[i], alpha = 0.8) +  # Density plot with dataset-specific color
labs(title = paste("Distribution of Max Expression Across Genes -", datasets[i]),
x = "Max Expression",
y = "Density") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create the density plot for Max Expression with non-overlapping gene labels
max_expr_plot_labeled <- ggplot(data, aes(x = Max.Expression)) +
geom_histogram(fill = colors[i], color = colors[i], alpha = 0.8) +  # Density plot with dataset-specific color
labs(title = paste("Distribution of Max Expression Across Genes -", datasets[i]),
x = "Max Expression",
y = "Density") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_line(data = density_median_df, aes(x = x, y = y), color = colors[i]) +  # Add density curve
geom_text_repel(data = label_data,
aes(x = Max.Expression, y = pmax(minimum_y, 0), label = Gene,  # Ensure y >= 0.1
color = label_color, fontface = fontface),
nudge_y = 0,   # Nudge labels slightly above the points
box.padding = 0.5,      # Add padding around each label
direction = "y",   # Stack vertically
max.overlaps = 200,  # Allow overlap of up to 200 labels
segment.size = 0,    # Remove the connecting lines between the labels
segment.color = NA,  # Ensure no segment lines are drawn
alpha = 0.7,
force = 1,          # Adjust the repelling strength for better stacking
nudge_x = 0)        # Avoid horizontal nudging so labels stay aligned vertically
# Save the unlabeled plot as a PDF with dataset-specific filenames
ggsave(paste0("../../results/rough-plots/unlabeled/", datasets[i], "_Max_Expression_Distribution.pdf"),
plot = max_expr_plot_no_labels, width = 10, height = 6)
# Save the labeled plot as a PDF with dataset-specific filenames
ggsave(paste0("../../results/rough-plots/", datasets[i], "_Max_Expression_Distribution_Labeled.pdf"),
plot = max_expr_plot_labeled, width = 10, height = 6)
}
rm(list = ls())
install.packages("dgof")
# loading the required package
library("dgof")
x1 <- rnorm(100)
ks.test(x1, "pnorm")
library(readr)
RNU1_phastCons30_summary_metrics <- read_csv("~/Documents/ncRNA-pseudogenes/data/phastCons30_summary/RNU1_phastCons30_summary_metrics.csv")
View(RNU1_phastCons30_summary_metrics)
# loading the required package
library("dgof")
library(readr)
RNU1_phastCons30_summary_metrics <- read_csv("../../data/phastCons30_summary/RNU1_phastCons30_summary_metrics.csv")
x1 <- rnorm(100)
ks.test(x1, "pnorm")
ks.test(RNU1_phastCons30_summary_metrics$Median_Conservation, "pnorm")
# loading the required package
library("dgof")
library(readr)
RNU1_phastCons30_summary_metrics <- read_csv("../../data/phastCons30_summary/RNU1_phastCons30_summary_metrics.csv")
x1 <- rnorm(100)
ks.test(x1, "pnorm")
ks.test(RNU1_phastCons30_summary_metrics$Median_Conservation, "pnorm", exact = FALSE)
# loading the required package
library("dgof")
library(readr)
RNU1_phastCons30_summary_metrics <- read_csv("../../data/phastCons30_summary/RNU1_phastCons30_summary_metrics.csv")
x1 <- rnorm(100)
ks.test(x1, "pnorm")
ks.test(RNU1_phastCons30_summary_metrics$Median_Conservation, "pnorm", exact = FALSE)
View(RNU1_phastCons30_summary_metrics)
# loading the required package
library(dplyr)
library("dgof")
library(readr)
data <- read_csv("../../data/phastCons30_summary/RNU1_phastCons30_summary_metrics.csv")
# Create a new column 'Gene_Type' to differentiate functional genes (RNU#-#) and pseudogenes (RNU#-#P)
data <- data %>%
mutate(Gene_Type = ifelse(grepl("P$", Gene), "Pseudogene", "Functional"))
# Separate functional genes and pseudogenes
functional_genes <- data$Median_Conservation[data$Gene_Type == "Functional"]
pseudogenes <- df$Median_Conservation[data$Gene_Type == "Pseudogene"]
# loading the required package
library(dplyr)
library("dgof")
library(readr)
data <- read_csv("../../data/phastCons30_summary/RNU1_phastCons30_summary_metrics.csv")
# Create a new column 'Gene_Type' to differentiate functional genes (RNU#-#) and pseudogenes (RNU#-#P)
data <- data %>%
mutate(Gene_Type = ifelse(grepl("P$", Gene), "Pseudogene", "Functional"))
# Separate functional genes and pseudogenes
functional_genes <- data$Median_Conservation[data$Gene_Type == "Functional"]
pseudogenes <- data$Median_Conservation[data$Gene_Type == "Pseudogene"]
x1 <- rnorm(100)
ks.test(x1, "pnorm")
ks.test(functional_genes, pseudogenes)
# loading the required package
library(dplyr)
library("dgof")
library(readr)
# Define the gene groups and conservation types
gene_groups <- c("RNU1", "RNU2", "RNU4", "RNU5", "RNU6")
conservation_types <- c("phastCons30", "phyloP100", "phyloP447")
# Create an empty list to store the test results
test_results <- data.frame(Conservation_Type = character(),
Gene_group = character(),
D = numeric(),
p_value = numeric(),
stringsAsFactors = FALSE)
# Loop through each conservation type (folder)
for (conservation in conservation_types) {
# Loop through each gene group (e.g., RNU1, RNU2, etc.)
for (gene in gene_groups) {
# Construct the file path for the current conservation type and gene group
file_path <- paste0("../../data/", conservation, "_summary/", gene, "_", conservation, "_summary_metrics.csv")
# Check if the file exists to avoid errors
if (!file.exists(file_path)) {
next  # Skip if the file doesn't exist
}
# Read the data for the current gene group and conservation type
data <- read_csv(file_path)
# Create a new column 'Gene_Type' to differentiate functional genes and pseudogenes
data <- data %>%
mutate(Gene_Type = ifelse(grepl("P$", Gene), "Pseudogene", "Functional"))
# Separate functional genes and pseudogenes
functional_genes <- data$Median_Conservation[data$Gene_Type == "Functional"]
pseudogenes <- data$Median_Conservation[data$Gene_Type == "Pseudogene"]
# Skip the iteration if there is insufficient data for either functional or pseudogene
if(length(functional_genes) < 2 | length(pseudogenes) < 2) {
next
}
# Perform the Kolmogorov-Smirnov test
ks_result <- ks.test(functional_genes, pseudogenes)
# Store the result in the test_results data frame
test_results <- rbind(test_results, data.frame(Conservation_Type = conservation,
Gene_group = gene,
D = ks_result$statistic,
p_value = ks_result$p.value,
stringsAsFactors = FALSE))
}
}
# Write the results into a CSV file
write.csv(test_results, "../../results/ks_test_results_conservation.csv", row.names = FALSE)
#test random data kolmogorov smirnov test
x1 <- rnorm(100)
ks.test(x1, "pnorm")
library(readr)
ks_test_results_conservation <- read_csv("~/Documents/ncRNA-pseudogenes/results/ks_test_results_conservation.csv")
View(ks_test_results_conservation)
warnings()
# loading the required package
library(dplyr)
library("dgof")
library(readr)
# Define the gene groups and conservation types
gene_groups <- c("RNU1", "RNU2", "RNU4", "RNU5", "RNU6")
conservation_types <- c("phastCons30", "phyloP100", "phyloP447")
# Create an empty list to store the test results
test_results <- data.frame(Conservation_Type = character(),
Gene_group = character(),
D = numeric(),
p_value = numeric(),
stringsAsFactors = FALSE)
# Loop through each conservation type (folder)
for (conservation in conservation_types) {
# Loop through each gene group (e.g., RNU1, RNU2, etc.)
for (gene in gene_groups) {
# Construct the file path for the current conservation type and gene group
file_path <- paste0("../../data/", conservation, "_summary/", gene, "_", conservation, "_summary_metrics.csv")
# Check if the file exists
if (!file.exists(file_path)) {
# If the file doesn't exist, print a message and skip
cat("Skipping: File does not exist for gene", gene, "in conservation type", conservation, "\n")
next  # Skip if the file doesn't exist
}
# Read the data for the current gene group and conservation type
data <- read_csv(file_path)
# Create a new column 'Gene_Type' to differentiate functional genes and pseudogenes
data <- data %>%
mutate(Gene_Type = ifelse(grepl("P$", Gene), "Pseudogene", "Functional"))
# Separate functional genes and pseudogenes
functional_genes <- data$Median_Conservation[data$Gene_Type == "Functional"]
pseudogenes <- data$Median_Conservation[data$Gene_Type == "Pseudogene"]
# Check if there is enough data for either functional or pseudogenes
if(length(functional_genes) < 2 | length(pseudogenes) < 2) {
# If there is insufficient data, print a message and skip
cat("Skipping:", gene, "in conservation type", conservation, "due to insufficient data\n")
next
}
# Perform the Kolmogorov-Smirnov test
ks_result <- ks.test(functional_genes, pseudogenes)
# Store the result in the test_results data frame
test_results <- rbind(test_results, data.frame(Conservation_Type = conservation,
Gene_group = gene,
D = ks_result$statistic,
p_value = ks_result$p.value,
stringsAsFactors = FALSE))
# Print a message indicating that the gene has been processed
cat("Processed:", gene, "in conservation type", conservation, "\n")
}
}
# Write the results into a CSV file
write.csv(test_results, "ks_test_results_combined.csv", row.names = FALSE)
#test random data kolmogorov smirnov test
x1 <- rnorm(100)
ks.test(x1, "pnorm")
library(readr)
ks_test_results_conservation <- read_csv("~/Documents/ncRNA-pseudogenes/results/ks_test_results_conservation.csv")
View(ks_test_results_conservation)
# loading the required package
library(dplyr)
library("dgof")
library(readr)
# Loading the required packages
library(dplyr)
library("dgof")
library(readr)
# Define the gene groups and conservation types
gene_groups <- c("RNU1", "RNU2", "RNU4", "RNU5", "RNU6")
conservation_types <- c("phastCons30", "phyloP100", "phyloP447")
# Create an empty list to store the test results
test_results <- data.frame(Conservation_Type = character(),
Gene_group = character(),
Test = character(),
Statistic = numeric(),
p_value = numeric(),
stringsAsFactors = FALSE)
# Loop through each conservation type (folder)
for (conservation in conservation_types) {
# Loop through each gene group (e.g., RNU1, RNU2, etc.)
for (gene in gene_groups) {
# Construct the file path for the current conservation type and gene group
file_path <- paste0("../../data/", conservation, "_summary/", gene, "_", conservation, "_summary_metrics.csv")
# Check if the file exists
if (!file.exists(file_path)) {
cat("Skipping: File does not exist for gene", gene, "in conservation type", conservation, "\n")
next
}
# Read the data for the current gene group and conservation type
data <- read_csv(file_path)
# Create a new column 'Gene_Type' to differentiate functional genes and pseudogenes
data <- data %>%
mutate(Gene_Type = ifelse(grepl("P$", Gene), "Pseudogene", "Functional"))
# Separate functional genes and pseudogenes
functional_genes <- data$Median_Conservation[data$Gene_Type == "Functional"]
pseudogenes <- data$Median_Conservation[data$Gene_Type == "Pseudogene"]
# Check if there is enough data for either functional or pseudogenes
if(length(functional_genes) == 1) {
# If only 1 functional gene, run Wilcoxon or T-test with the pseudogene group
cat("Running Wilcoxon test for", gene, "in conservation type", conservation, "due to only 1 functional gene\n")
test_result <- wilcox.test(functional_genes, pseudogenes, exact = FALSE)
test_results <- rbind(test_results, data.frame(Conservation_Type = conservation,
Gene_group = gene,
Test = "Wilcoxon",
Statistic = test_result$statistic,
p_value = test_result$p.value,
stringsAsFactors = FALSE))
} else if(length(functional_genes) >= 2 && length(pseudogenes) >= 2) {
# If there are at least two samples in each group, perform the Kolmogorov-Smirnov test
ks_result <- ks.test(functional_genes, pseudogenes)
test_results <- rbind(test_results, data.frame(Conservation_Type = conservation,
Gene_group = gene,
Test = "KS",
Statistic = ks_result$statistic,
p_value = ks_result$p.value,
stringsAsFactors = FALSE))
} else {
cat("Skipping:", gene, "in conservation type", conservation, "due to insufficient data\n")
}
# Print a message indicating that the gene has been processed
cat("Processed:", gene, "in conservation type", conservation, "\n")
}
}
# Write the results into a CSV file
write.csv(test_results, "ks_wilcoxon_test_results_combined.csv", row.names = FALSE)
#test random data kolmogorov smirnov test
x1 <- rnorm(100)
ks.test(x1, "pnorm")
library(readr)
ks_test_results_conservation <- read_csv("~/Documents/ncRNA-pseudogenes/results/ks_test_results_conservation.csv")
View(ks_test_results_conservation)
# loading the required package
library(dplyr)
library("dgof")
library(readr)
# Loading the required packages
library(dplyr)
library("dgof")
library(readr)
# Define the gene groups and conservation types
gene_groups <- c("RNU1", "RNU2", "RNU4", "RNU5", "RNU6")
conservation_types <- c("phastCons30", "phyloP100", "phyloP447")
# Create an empty list to store the test results
test_results <- data.frame(Conservation_Type = character(),
Gene_group = character(),
Test = character(),
Statistic = numeric(),
p_value = numeric(),
stringsAsFactors = FALSE)
# Loop through each conservation type (folder)
for (conservation in conservation_types) {
# Loop through each gene group (e.g., RNU1, RNU2, etc.)
for (gene in gene_groups) {
# Construct the file path for the current conservation type and gene group
file_path <- paste0("../../data/", conservation, "_summary/", gene, "_", conservation, "_summary_metrics.csv")
# Check if the file exists
if (!file.exists(file_path)) {
cat("Skipping: File does not exist for gene", gene, "in conservation type", conservation, "\n")
next
}
# Read the data for the current gene group and conservation type
data <- read_csv(file_path)
# Create a new column 'Gene_Type' to differentiate functional genes and pseudogenes
data <- data %>%
mutate(Gene_Type = ifelse(grepl("P$", Gene), "Pseudogene", "Functional"))
# Separate functional genes and pseudogenes
functional_genes <- data$Median_Conservation[data$Gene_Type == "Functional"]
pseudogenes <- data$Median_Conservation[data$Gene_Type == "Pseudogene"]
# Check if there is enough data for either functional or pseudogenes
if(length(functional_genes) == 1) {
# If only 1 functional gene, run Wilcoxon or T-test with the pseudogene group
cat("Running Wilcoxon test for", gene, "in conservation type", conservation, "due to only 1 functional gene\n")
test_result <- wilcox.test(functional_genes, pseudogenes, exact = FALSE)
test_results <- rbind(test_results, data.frame(Conservation_Type = conservation,
Gene_group = gene,
Test = "Wilcoxon",
Statistic = test_result$statistic,
p_value = test_result$p.value,
stringsAsFactors = FALSE))
} else if(length(functional_genes) >= 2 && length(pseudogenes) >= 2) {
# If there are at least two samples in each group, perform the Kolmogorov-Smirnov test
ks_result <- ks.test(functional_genes, pseudogenes)
test_results <- rbind(test_results, data.frame(Conservation_Type = conservation,
Gene_group = gene,
Test = "KS",
Statistic = ks_result$statistic,
p_value = ks_result$p.value,
stringsAsFactors = FALSE))
} else {
cat("Skipping:", gene, "in conservation type", conservation, "due to insufficient data\n")
}
# Print a message indicating that the gene has been processed
cat("Processed:", gene, "in conservation type", conservation, "\n")
}
}
# Write the results into a CSV file
write.csv(test_results, "../../results/ks_wilcoxon_test_results_combined.csv", row.names = FALSE)
#test random data kolmogorov smirnov test
x1 <- rnorm(100)
ks.test(x1, "pnorm")
library(readr)
ks_wilcoxon_test_results_combined <- read_csv("~/Documents/ncRNA-pseudogenes/results/ks_wilcoxon_test_results_combined.csv")
View(ks_wilcoxon_test_results_combined)
library(readr)
ks_test_results_conservation <- read_csv("~/Documents/ncRNA-pseudogenes/results/ks_test_results_conservation.csv")
View(ks_test_results_conservation)
# loading the required package
library(dplyr)
library("dgof")
library(readr)
# Define the gene groups and conservation types
gene_groups <- c("RNU1", "RNU2", "RNU4", "RNU5", "RNU6")
conservation_types <- c("phastCons30", "phyloP100", "phyloP447")
# Create an empty list to store the test results
test_results <- data.frame(Conservation_Type = character(),
Gene_group = character(),
Test = character(),
Statistic = numeric(),
p_value = numeric(),
stringsAsFactors = FALSE)
# Loop through each conservation type (folder)
for (conservation in conservation_types) {
# Loop through each gene group (e.g., RNU1, RNU2, etc.)
for (gene in gene_groups) {
# Construct the file path for the current conservation type and gene group
file_path <- paste0("../../data/", conservation, "_summary/", gene, "_", conservation, "_summary_metrics.csv")
# Check if the file exists
if (!file.exists(file_path)) {
cat("Skipping: File does not exist for gene", gene, "in conservation type", conservation, "\n")
next
}
# Read the data for the current gene group and conservation type
data <- read_csv(file_path)
# Create a new column 'Gene_Type' to differentiate functional genes and pseudogenes
data <- data %>%
mutate(Gene_Type = ifelse(grepl("P$", Gene), "Pseudogene", "Functional"))
# Separate functional genes and pseudogenes
functional_genes <- data$Median_Conservation[data$Gene_Type == "Functional"]
pseudogenes <- data$Median_Conservation[data$Gene_Type == "Pseudogene"]
# Always run the KS test for RNU2
if (gene == "RNU2") {
cat("Running KS test for RNU2 in conservation type", conservation, "\n")
ks_result <- ks.test(functional_genes, pseudogenes)
test_results <- rbind(test_results, data.frame(Conservation_Type = conservation,
Gene_group = gene,
Test = "KS",
Statistic = ks_result$statistic,
p_value = ks_result$p.value,
stringsAsFactors = FALSE))
} else {
# Check if there is enough data for either functional or pseudogenes (at least 2 samples in each group)
if(length(functional_genes) >= 2 && length(pseudogenes) >= 2) {
# Perform the Kolmogorov-Smirnov test for other genes with sufficient data
ks_result <- ks.test(functional_genes, pseudogenes)
test_results <- rbind(test_results, data.frame(Conservation_Type = conservation,
Gene_group = gene,
Test = "KS",
Statistic = ks_result$statistic,
p_value = ks_result$p.value,
stringsAsFactors = FALSE))
} else {
cat("Skipping:", gene, "in conservation type", conservation, "due to insufficient data\n")
}
}
# Print a message indicating that the gene has been processed
cat("Processed:", gene, "in conservation type", conservation, "\n")
}
}
# Write the results into a CSV file
write.csv(test_results, "../../results/ks_wilcoxon_test_results_combined.csv", row.names = FALSE)
#test random data kolmogorov smirnov test
x1 <- rnorm(100)
ks.test(x1, "pnorm")
library(readr)
ks_wilcoxon_test_results_combined <- read_csv("~/Documents/ncRNA-pseudogenes/results/ks_wilcoxon_test_results_combined.csv")
View(ks_wilcoxon_test_results_combined)
