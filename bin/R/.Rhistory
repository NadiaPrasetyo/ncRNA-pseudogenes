# Define the list of datasets and corresponding colors
#datasets <- c("RNU1", "RNU2", "RNU4", "RNU5", "RNU6")
#colors <- c("lightskyblue", "salmon", "khaki1", "seagreen1", "orchid1" )  # Different colors for each dataset
datasets <- c("RNU4ATAC", "RNU6ATAC", "RNU11", "RNU12", "VTRNA")
colors <- c("deeppink1", "turquoise2", "chocolate3", "darkgray", "forestgreen" )
# Loop through each dataset
for (i in 1:length(datasets)) {
# Read the CSV data for the current dataset
data <- read.csv(paste0("../../data/phyloP447_summary/", datasets[i], "_phyloP447_summary_metrics.csv"))
#calculate 10% of the count
minimum_y <- nrow(data) * 0.1
# Calculate thresholds for high values
median_threshold <- mean(data$Median_Conservation, na.rm = TRUE) + 2 * sd(data$Median_Conservation, na.rm = TRUE)
# Filter data for genes with high median conservation
label_data <- data %>%
filter(Median_Conservation > median_threshold)
# Create a new column for styling (check if 'Gene' does not contain a "p")
label_data <- label_data %>%
mutate(is_bold = !str_detect(Gene, "P"),  # TRUE if 'Gene' does not contain "p"
label_color = if_else(is_bold, "Gene", "Pseudogene"),  # Set color to blue if not "p"
fontface = if_else(is_bold, "bold", "plain"))  # Set fontface to bold if not "p"
# Calculate the density for the data
density_median <- density(data$Median_Conservation, na.rm = TRUE)
# Convert density data to data frames
density_median_df <- data.frame(x = density_median$x, y = density_median$y)
# Plot Median Conservation with non-overlapping gene labels for high values
median_plot <- ggplot(data, aes(x = Median_Conservation)) +
geom_histogram(fill = colors[i], alpha = 0.8) +
labs(title = paste("Distribution of Median Conservation for", datasets[i]),
x = "Median Conservation",
y = "Density") +
theme_minimal() +
geom_line(data = density_median_df, aes(x = x, y = y), color = colors[i]) +  # Add density curve
geom_text_repel(data = label_data,
aes(x = Median_Conservation, y = pmax(minimum_y, 0), label = Gene,  # Ensure y >= 0.1
color = label_color, fontface = fontface),
nudge_y = 0,   # Nudge labels slightly above the points
box.padding = 0.5,      # Add padding around each label
direction = "y",   # Stack vertically
max.overlaps = 200,  # Allow overlap of up to 200 labels
segment.size = 0,    # Remove the connecting lines between the labels
segment.color = NA,  # Ensure no segment lines are drawn
alpha = 0.7,
force = 1,          # Adjust the repelling strength for better stacking
nudge_x = 0)        # Avoid horizontal nudging so labels stay aligned vertically
# Save the median plot with the appropriate file name
ggsave(paste0("../../results/rough-plots/", datasets[i], "_phyloP447_Median_Conservation_Distribution_Labeled.pdf"),
plot = median_plot, width = 15, height = 6)
# Plot Median Conservation without gene labels
median_plot_no_labels <- ggplot(data, aes(x = Median_Conservation)) +
geom_histogram(fill = colors[i], alpha = 0.8) +
labs(title = paste("Distribution of Median Conservation for", datasets[i]),
x = "Median Conservation",
y = "Density") +
theme_minimal() +
geom_line(data = density_median_df, aes(x = x, y = y), color = colors[i])  # Add density curve
# Save the median plot without labels
ggsave(paste0("../../results/rough-plots/unlabeled/", datasets[i], "_phyloP447_Median_Conservation_Distribution.pdf"),
plot = median_plot_no_labels, width = 15, height = 6)
}
# Load the required packages
library(dplyr)
library("dgof")
library(readr)
# Define the gene groups and conservation types
gene_groups <- c("RNU1", "RNU2", "RNU4", "RNU5", "RNU6", "RNU4ATAC", "RNU6ATAC", "RNU11", "RNU12", "VTRNA")
# Create an empty data frame to store the test results
test_results <- data.frame(Gene_group = character(),
Test = character(),
Statistic = numeric(),
p_value = numeric(),
Functional_n = integer(),
Pseudogene_n = integer(),
stringsAsFactors = FALSE)
# Create empty vectors to collect pooled data for functional and pseudogenes across all genes
all_functional_genes <- c()
all_pseudogenes <- c()
# Loop through each gene group (e.g., RNU1, RNU2, etc.)
for (gene in gene_groups) {
# Read the data for the current gene group and conservation type
data <- read_csv(paste0("../../data/", gene, "_expr.csv"))
# Create a new column 'Gene_Type' to differentiate functional genes and pseudogenes
data <- data %>%
mutate(Gene_Type = ifelse(grepl("P$", Gene), "Pseudogene", "Functional"))
# Separate functional genes and pseudogenes
functional_genes <- data$`Max Expression`[data$Gene_Type == "Functional"]
pseudogenes <- data$`Max Expression`[data$Gene_Type == "Pseudogene"]
# Add to the pooled data for later testing
all_functional_genes <- c(all_functional_genes, functional_genes)
all_pseudogenes <- c(all_pseudogenes, pseudogenes)
# Count the sample sizes for functional genes and pseudogenes
functional_n <- length(functional_genes)
pseudogene_n <- length(pseudogenes)
# Always run the KS test for RNU2
if (gene == "RNU2") {
ks_result <- ks.test(functional_genes, pseudogenes)
test_results <- rbind(test_results, data.frame(Gene_group = gene,
Test = "KS",
Statistic = ks_result$statistic,
p_value = ks_result$p.value,
Functional_n = functional_n,
Pseudogene_n = pseudogene_n,
stringsAsFactors = FALSE))
} else {
# Check if there is enough data for either functional or pseudogenes (at least 2 samples in each group)
if(functional_n >= 2 && pseudogene_n >= 2) {
# Perform the Kolmogorov-Smirnov test for other genes with sufficient data
ks_result <- ks.test(functional_genes, pseudogenes)
test_results <- rbind(test_results, data.frame(Gene_group = gene,
Test = "KS",
Statistic = ks_result$statistic,
p_value = ks_result$p.value,
Functional_n = functional_n,
Pseudogene_n = pseudogene_n,
stringsAsFactors = FALSE))
} else {
cat("Skipping:", gene,  "due to insufficient data\n")
}
}
# Print a message indicating that the gene has been processed
cat("Processed:", gene, "\n")
}
# Perform the KS test on the pooled functional and pseudogene data
pooled_functional_n <- length(all_functional_genes)
pooled_pseudogene_n <- length(all_pseudogenes)
if (pooled_functional_n >= 2 && pooled_pseudogene_n >= 2) {
pooled_ks_result <- ks.test(all_functional_genes, all_pseudogenes)
test_results <- rbind(test_results, data.frame(Gene_group = "All_Genes_Pooled",
Test = "KS",
Statistic = pooled_ks_result$statistic,
p_value = pooled_ks_result$p.value,
Functional_n = pooled_functional_n,
Pseudogene_n = pooled_pseudogene_n,
stringsAsFactors = FALSE))
} else {
cat("Insufficient data for pooled analysis.\n")
}
# Write the results into a CSV file
write.csv(test_results, "../../results/ks_test_expression_results.csv", row.names = FALSE)
# Test random data Kolmogorov-Smirnov test
x1 <- rnorm(100)
ks.test(x1, "pnorm")
# Loading the required packages
library(dplyr)
library("dgof")
library(readr)
# Define the gene groups and conservation types
gene_groups <- c("RNU1", "RNU2", "RNU4", "RNU5", "RNU6", "RNU4ATAC", "RNU6ATAC", "RNU11", "RNU12", "VTRNA")
conservation_types <- c("phastCons30", "phyloP100", "phyloP447")
# Create an empty data frame to store the test results with sample counts
test_results <- data.frame(Conservation_Type = character(),
Gene_group = character(),
Test = character(),
Statistic = numeric(),
p_value = numeric(),
Functional_Sample_Count = integer(),
Pseudogene_Sample_Count = integer(),
stringsAsFactors = FALSE)
# Loop through each conservation type (folder)
for (conservation in conservation_types) {
# Create empty vectors for pooled functional and pseudogene data and sample counts
pooled_functional <- c()
pooled_pseudogenes <- c()
pooled_functional_count <- 0
pooled_pseudogene_count <- 0
# Loop through each gene group (e.g., RNU1, RNU2, etc.)
for (gene in gene_groups) {
# Construct the file path for the current conservation type and gene group
file_path <- paste0("../../data/", conservation, "_summary/", gene, "_", conservation, "_summary_metrics.csv")
# Check if the file exists
if (!file.exists(file_path)) {
cat("Skipping: File does not exist for gene", gene, "in conservation type", conservation, "\n")
next
}
# Read the data for the current gene group and conservation type
data <- read_csv(file_path)
# Create a new column 'Gene_Type' to differentiate functional genes and pseudogenes
data <- data %>%
mutate(Gene_Type = ifelse(grepl("P$", Gene), "Pseudogene", "Functional"))
# Separate functional genes and pseudogenes
functional_genes <- data$Median_Conservation[data$Gene_Type == "Functional"]
pseudogenes <- data$Median_Conservation[data$Gene_Type == "Pseudogene"]
# Update the sample counts
functional_count <- length(functional_genes)
pseudogene_count <- length(pseudogenes)
# Append to pooled lists
pooled_functional <- c(pooled_functional, functional_genes)
pooled_pseudogenes <- c(pooled_pseudogenes, pseudogenes)
pooled_functional_count <- pooled_functional_count + functional_count
pooled_pseudogene_count <- pooled_pseudogene_count + pseudogene_count
# Perform KS test if there's enough data for this gene group
if (functional_count >= 2 && pseudogene_count >= 2) {
ks_result <- ks.test(functional_genes, pseudogenes)
test_results <- rbind(test_results, data.frame(Conservation_Type = conservation,
Gene_group = gene,
Test = "KS",
Statistic = ks_result$statistic,
p_value = ks_result$p.value,
Functional_Sample_Count = functional_count,
Pseudogene_Sample_Count = pseudogene_count,
stringsAsFactors = FALSE))
} else {
cat("Skipping:", gene, "in conservation type", conservation, "due to insufficient data\n")
}
# Print a message indicating that the gene has been processed
cat("Processed:", gene, "in conservation type", conservation, "\n")
}
# Perform the KS test on pooled data if there's enough data in both groups
if(pooled_functional_count >= 2 && pooled_pseudogene_count >= 2) {
cat("Running KS test on pooled data for conservation type", conservation, "\n")
ks_result <- ks.test(pooled_functional, pooled_pseudogenes)
# Store the pooled test result with sample counts
test_results <- rbind(test_results, data.frame(Conservation_Type = conservation,
Gene_group = "Pooled",
Test = "KS",
Statistic = ks_result$statistic,
p_value = ks_result$p.value,
Functional_Sample_Count = pooled_functional_count,
Pseudogene_Sample_Count = pooled_pseudogene_count,
stringsAsFactors = FALSE))
} else {
cat("Skipping pooled KS test for conservation type", conservation, "due to insufficient data\n")
}
}
# Write the results into a CSV file
write.csv(test_results, "../../results/ks_test_conservation_results.csv", row.names = FALSE)
#test random data kolmogorov smirnov test
x1 <- rnorm(100)
ks.test(x1, "pnorm")
rm(list =ls())
library(readr)
ks_test_conservation_pooled <- read_csv("~/Documents/ncRNA-pseudogenes/results/ks_test_conservation_pooled.csv")
View(ks_test_conservation_pooled)
library(readr)
ks_test_conservation_results <- read_csv("~/Documents/ncRNA-pseudogenes/results/ks_test_conservation_results.csv")
View(ks_test_conservation_results)
library(readr)
ks_test_expression_results <- read_csv("~/Documents/ncRNA-pseudogenes/results/ks_test_expression_results.csv")
View(ks_test_expression_results)
# Loading the required packages
library(dplyr)
library(readr)
# Define the gene groups and conservation types
gene_groups <- c("RNU1", "RNU2", "RNU4", "RNU5", "RNU6", "RNU4ATAC", "RNU6ATAC", "RNU11", "RNU12", "VTRNA")
conservation_types <- c("phastCons30", "phyloP100", "phyloP447")
# Create an empty data frame to store the test results with sample counts
test_results <- data.frame(Conservation_Type = character(),
Gene_group = character(),
Test = character(),
Statistic = numeric(),
p_value = numeric(),
Functional_Sample_Count = integer(),
Pseudogene_Sample_Count = integer(),
stringsAsFactors = FALSE)
# Loop through each conservation type (folder)
for (conservation in conservation_types) {
# Create empty vectors for pooled functional and pseudogene data and sample counts
pooled_functional <- c()
pooled_pseudogenes <- c()
pooled_functional_count <- 0
pooled_pseudogene_count <- 0
# Loop through each gene group (e.g., RNU1, RNU2, etc.)
for (gene in gene_groups) {
# Construct the file path for the current conservation type and gene group
file_path <- paste0("../../data/", conservation, "_summary/", gene, "_", conservation, "_summary_metrics.csv")
# Check if the file exists
if (!file.exists(file_path)) {
cat("File does not exist for gene", gene, "in conservation type", conservation, "\n")
# Record the result with "Insufficient data" message in Statistic and p_value columns
test_results <- rbind(test_results, data.frame(Conservation_Type = conservation,
Gene_group = gene,
Test = "KS",
Statistic = NA,
p_value = NA,
Functional_Sample_Count = 0,
Pseudogene_Sample_Count = 0,
stringsAsFactors = FALSE))
next  # Skip to the next gene
}
# Read the data for the current gene group and conservation type
data <- read_csv(file_path)
# Create a new column 'Gene_Type' to differentiate functional genes and pseudogenes
data <- data %>%
mutate(Gene_Type = ifelse(grepl("P$", Gene), "Pseudogene", "Functional"))
# Separate functional genes and pseudogenes
functional_genes <- data$Median_Conservation[data$Gene_Type == "Functional"]
pseudogenes <- data$Median_Conservation[data$Gene_Type == "Pseudogene"]
# Update the sample counts
functional_count <- length(functional_genes)
pseudogene_count <- length(pseudogenes)
# Append to pooled lists
pooled_functional <- c(pooled_functional, functional_genes)
pooled_pseudogenes <- c(pooled_pseudogenes, pseudogenes)
pooled_functional_count <- pooled_functional_count + functional_count
pooled_pseudogene_count <- pooled_pseudogene_count + pseudogene_count
# Perform KS test (even with insufficient data, we will just record NA values)
ks_result <- ks.test(functional_genes, pseudogenes)
test_results <- rbind(test_results, data.frame(Conservation_Type = conservation,
Gene_group = gene,
Test = "KS",
Statistic = ks_result$statistic,
p_value = ks_result$p.value,
Functional_Sample_Count = functional_count,
Pseudogene_Sample_Count = pseudogene_count,
stringsAsFactors = FALSE))
# Print a message indicating that the gene has been processed
cat("Processed:", gene, "in conservation type", conservation, "\n")
}
# Perform the KS test on pooled data (always attempt KS, even if sample size is low)
ks_result <- ks.test(pooled_functional, pooled_pseudogenes)
# Store the pooled test result with sample counts
test_results <- rbind(test_results, data.frame(Conservation_Type = conservation,
Gene_group = "Pooled",
Test = "KS",
Statistic = ks_result$statistic,
p_value = ks_result$p.value,
Functional_Sample_Count = pooled_functional_count,
Pseudogene_Sample_Count = pooled_pseudogene_count,
stringsAsFactors = FALSE))
}
# Write the results into a CSV file
write.csv(test_results, "../../results/ks_test_conservation_results.csv", row.names = FALSE)
# Test random data Kolmogorov-Smirnov test (example)
x1 <- rnorm(100)
ks.test(x1, "pnorm")
# Load the required packages
library(dplyr)
library(readr)
# Define the gene groups
gene_groups <- c("RNU1", "RNU2", "RNU4", "RNU5", "RNU6", "RNU4ATAC", "RNU6ATAC", "RNU11", "RNU12", "VTRNA")
# Create an empty data frame to store the test results
test_results <- data.frame(Gene_group = character(),
Test = character(),
Statistic = numeric(),
p_value = numeric(),
Functional_n = integer(),
Pseudogene_n = integer(),
stringsAsFactors = FALSE)
# Create empty vectors to collect pooled data for functional and pseudogenes across all genes
all_functional_genes <- c()
all_pseudogenes <- c()
# Loop through each gene group (e.g., RNU1, RNU2, etc.)
for (gene in gene_groups) {
# Read the data for the current gene group
data <- read_csv(paste0("../../data/", gene, "_expr.csv"))
# Create a new column 'Gene_Type' to differentiate functional genes and pseudogenes
data <- data %>%
mutate(Gene_Type = ifelse(grepl("P$", Gene), "Pseudogene", "Functional"))
# Separate functional genes and pseudogenes
functional_genes <- data$`Max Expression`[data$Gene_Type == "Functional"]
pseudogenes <- data$`Max Expression`[data$Gene_Type == "Pseudogene"]
# Add to the pooled data for later testing
all_functional_genes <- c(all_functional_genes, functional_genes)
all_pseudogenes <- c(all_pseudogenes, pseudogenes)
# Count the sample sizes for functional genes and pseudogenes
functional_n <- length(functional_genes)
pseudogene_n <- length(pseudogenes)
# Always run the KS test for each gene group, regardless of the sample sizes
ks_result <- tryCatch({
ks.test(functional_genes, pseudogenes)
}, error = function(e) {
# If there's an error (e.g., because of too few data points), return NULL
NULL
})
# If KS test was successful, store the results, otherwise, store NA
if (!is.null(ks_result)) {
test_results <- rbind(test_results, data.frame(Gene_group = gene,
Test = "KS",
Statistic = ks_result$statistic,
p_value = ks_result$p.value,
Functional_n = functional_n,
Pseudogene_n = pseudogene_n,
stringsAsFactors = FALSE))
} else {
test_results <- rbind(test_results, data.frame(Gene_group = gene,
Test = "KS",
Statistic = NA,
p_value = NA,
Functional_n = functional_n,
Pseudogene_n = pseudogene_n,
stringsAsFactors = FALSE))
}
# Print a message indicating that the gene has been processed
cat("Processed:", gene, "\n")
}
# Perform the KS test on the pooled functional and pseudogene data
pooled_functional_n <- length(all_functional_genes)
pooled_pseudogene_n <- length(all_pseudogenes)
# Always run the KS test on pooled data, regardless of sample size
pooled_ks_result <- tryCatch({
ks.test(all_functional_genes, all_pseudogenes)
}, error = function(e) {
NULL
})
# If KS test on pooled data was successful, store the results, otherwise, store NA
if (!is.null(pooled_ks_result)) {
test_results <- rbind(test_results, data.frame(Gene_group = "All_Genes_Pooled",
Test = "KS",
Statistic = pooled_ks_result$statistic,
p_value = pooled_ks_result$p.value,
Functional_n = pooled_functional_n,
Pseudogene_n = pooled_pseudogene_n,
stringsAsFactors = FALSE))
} else {
test_results <- rbind(test_results, data.frame(Gene_group = "All_Genes_Pooled",
Test = "KS",
Statistic = NA,
p_value = NA,
Functional_n = pooled_functional_n,
Pseudogene_n = pooled_pseudogene_n,
stringsAsFactors = FALSE))
}
# Write the results into a CSV file
write.csv(test_results, "../../results/ks_test_expression_results.csv", row.names = FALSE)
# Test random data Kolmogorov-Smirnov test
x1 <- rnorm(100)
ks.test(x1, "pnorm")
library(readr)
ks_test_conservation_results <- read_csv("~/Documents/ncRNA-pseudogenes/results/ks_test_conservation_results.csv")
View(ks_test_conservation_results)
library(readr)
ks_test_expression_results <- read_csv("~/Documents/ncRNA-pseudogenes/results/ks_test_expression_results.csv")
View(ks_test_expression_results)
# Loading the required packages
library(dplyr)
library(readr)
# Define the gene groups and conservation types
gene_groups <- c("RNU1", "RNU2", "RNU4", "RNU5", "RNU6", "RNU4ATAC", "RNU6ATAC", "RNU11", "RNU12", "VTRNA")
conservation_types <- c("phastCons30", "phyloP100", "phyloP447")
# Create an empty data frame to store the test results with sample counts
test_results <- data.frame(Conservation_Type = character(),
Gene_group = character(),
Statistic = numeric(),
p_value = numeric(),
Functional_Sample_Count = integer(),
Pseudogene_Sample_Count = integer(),
stringsAsFactors = FALSE)
# Loop through each conservation type (folder)
for (conservation in conservation_types) {
# Create empty vectors for pooled functional and pseudogene data and sample counts
pooled_functional <- c()
pooled_pseudogenes <- c()
pooled_functional_count <- 0
pooled_pseudogene_count <- 0
# Loop through each gene group (e.g., RNU1, RNU2, etc.)
for (gene in gene_groups) {
# Construct the file path for the current conservation type and gene group
file_path <- paste0("../../data/", conservation, "_summary/", gene, "_", conservation, "_summary_metrics.csv")
# Check if the file exists
if (!file.exists(file_path)) {
cat("File does not exist for gene", gene, "in conservation type", conservation, "\n")
# Record the result with "Insufficient data" message in Statistic and p_value columns
test_results <- rbind(test_results, data.frame(Conservation_Type = conservation,
Gene_group = gene,
Statistic = NA,
p_value = NA,
Functional_Sample_Count = 0,
Pseudogene_Sample_Count = 0,
stringsAsFactors = FALSE))
next  # Skip to the next gene
}
# Read the data for the current gene group and conservation type
data <- read_csv(file_path)
# Create a new column 'Gene_Type' to differentiate functional genes and pseudogenes
data <- data %>%
mutate(Gene_Type = ifelse(grepl("P$", Gene), "Pseudogene", "Functional"))
# Separate functional genes and pseudogenes
functional_genes <- data$Median_Conservation[data$Gene_Type == "Functional"]
pseudogenes <- data$Median_Conservation[data$Gene_Type == "Pseudogene"]
# Update the sample counts
functional_count <- length(functional_genes)
pseudogene_count <- length(pseudogenes)
# Append to pooled lists
pooled_functional <- c(pooled_functional, functional_genes)
pooled_pseudogenes <- c(pooled_pseudogenes, pseudogenes)
pooled_functional_count <- pooled_functional_count + functional_count
pooled_pseudogene_count <- pooled_pseudogene_count + pseudogene_count
# Perform KS test (even with insufficient data, we will just record NA values)
ks_result <- ks.test(functional_genes, pseudogenes)
test_results <- rbind(test_results, data.frame(Conservation_Type = conservation,
Gene_group = gene,
Statistic = ks_result$statistic,
p_value = ks_result$p.value,
Functional_Sample_Count = functional_count,
Pseudogene_Sample_Count = pseudogene_count,
stringsAsFactors = FALSE))
# Print a message indicating that the gene has been processed
cat("Processed:", gene, "in conservation type", conservation, "\n")
}
# Perform the KS test on pooled data (always attempt KS, even if sample size is low)
ks_result <- ks.test(pooled_functional, pooled_pseudogenes)
# Store the pooled test result with sample counts
test_results <- rbind(test_results, data.frame(Conservation_Type = conservation,
Gene_group = "Pooled",
Statistic = ks_result$statistic,
p_value = ks_result$p.value,
Functional_Sample_Count = pooled_functional_count,
Pseudogene_Sample_Count = pooled_pseudogene_count,
stringsAsFactors = FALSE))
}
# Write the results into a CSV file
write.csv(test_results, "../../results/ks_test_conservation_results.csv", row.names = FALSE)
# Test random data Kolmogorov-Smirnov test (example)
x1 <- rnorm(100)
ks.test(x1, "pnorm")
rm(list = ls())
library(readr)
ks_test_conservation_results <- read_csv("~/Documents/ncRNA-pseudogenes/results/ks_test_conservation_results.csv")
View(ks_test_conservation_results)
library(readr)
ks_test_expression_results <- read_csv("~/Documents/ncRNA-pseudogenes/results/ks_test_expression_results.csv")
View(ks_test_expression_results)
