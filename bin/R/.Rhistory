plot <- ggplot(data.frame(PC = seq_along(variance_explained),
Variance = prop_variance_explained),
aes(x = PC, y = Variance)) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_text(aes(label = round(Variance, 2)), vjust = -0.5, size = 3) +
geom_line(aes(y = cumsum(prop_variance_explained), group = 1), color = "red") +
geom_point(aes(y = cumsum(prop_variance_explained)), color = "red") +
labs(title = "Scree Plot",
x = "Principal Component",
y = "Variance Explained (%)") +
theme_minimal()
ggsave("../../results/PCA_plot_variance_summary.pdf", plot = plot)
# Loadings (contributions of variables to PCs)
loadings <- pca_result$rotation
print(loadings)
# Extract loadings for PC1 and PC2
loadings_df <- data.frame(
Variable = rownames(loadings),
PC1 = loadings[, "PC1"],
PC2 = loadings[, "PC2"]
)
# Loadings plot
plot <- ggplot(loadings_df, aes(x = PC1, y = PC2, label = Variable)) +
geom_point(size = 3, color = "blue") +
geom_text(vjust = 1.5, size = 4) +  # Labels for variables
labs(
title = "Loadings Plot for PC1 and PC2",
x = "PC1 Loadings",
y = "PC2 Loadings"
) +
theme_minimal() +
geom_hline(yintercept = 0, linetype = "dashed") +  # Add horizontal axis
geom_vline(xintercept = 0, linetype = "dashed")    # Add vertical axis
ggsave("../../results/PCA_plot_loadings.pdf", plot = plot)
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Data-loading step
data <- read.csv("../../results/combined_gene_data.csv")
# Define custom colors for each Gene_group and Gene_Type combination
custom_colors <- c(
"RNU1.Functional" = "#1f77b4",
"RNU1.Pseudogene" = "#aec7e8",
"RNU2.Functional" = "#d62728",
"RNU2.Pseudogene" = "#ff9896",
"RNU4.Functional" = "#ffc23c",
"RNU4.Pseudogene" = "#fff26c",
"RNU5.Functional" = "#2ca02c",
"RNU5.Pseudogene" = "#98df8a",
"RNU6.Functional" = "#9467bd",
"RNU6.Pseudogene" = "#c5b0d5",
"RNU4ATAC.Functional" = "#8c564b",
"RNU4ATAC.Pseudogene" = "#c5b0a0",
"RNU6ATAC.Functional" = "#e377c2",
"RNU6ATAC.Pseudogene" = "#f7b6d0",
"RNU11.Functional" = "#7f7f7f",
"RNU11.Pseudogene" = "#bfbfbf",
"RNU12.Functional" = "#bcbd22",
"RNU12.Pseudogene" = "#d7e300",
"VTRNA.Functional" = "#17becf",
"VTRNA.Pseudogene" = "#a7d8e7",
"RNY.Functional" = "#ffb6c1",
"RNY.Pseudogene" = "#ff8ca0",
"TRNA.Functional" = "#8c8c8c",
"TRNA.Pseudogene" = "#b2b2b2",
"RN7SL.Functional" = "#f4a300",
"RN7SL.Pseudogene" = "#f9c100",
"RNU7.Functional" = "#e9d3ff",
"RNU7.Pseudogene" = "#d6a9ff",
"RN7SK.Functional" = "#1f77b4",
"RN7SK.Pseudogene" = "#88c9f2"
)
# Clean the data: Remove rows with non-finite PhyloP100_median
clean_data <- data %>%
filter(is.finite(PhyloP100_median))
# Normalize data by Gene_group and Gene_Type
normalized_data <- clean_data %>%
group_by(Gene_group) %>%
mutate(
control_median = ifelse(
any(Gene_Type == "Pseudogene"),
median(PhyloP100_median[Gene_Type == "Pseudogene"]),
NA
),
control_mad = ifelse(
any(Gene_Type == "Pseudogene"),
mad(PhyloP100_median[Gene_Type == "Pseudogene"]),
1  # Use mad = 1 to avoid division by zero
),
Z_score = ifelse(
!is.na(control_median),
(PhyloP100_median - control_median) / control_mad,
NA
)
) %>%
ungroup() %>%
mutate(Z_score = ifelse(is.na(Z_score), 0, Z_score))
# Create Gene_Type_combined for all gene groups (not just the combined ones)
normalized_data <- normalized_data %>%
mutate(
Gene_Type_combined = paste(Gene_group, Gene_Type, sep = ".")  # Combine Gene_group and Gene_Type for color mapping
)
# Define the combined groups for RNU1, RNU2, RNU4, RNU5, and RNU6
combined_groups <- c("RNU1", "RNU2", "RNU4", "RNU5", "RNU6")
# Create combined data for the selected Gene_groups
combined_data <- normalized_data %>%
filter(Gene_group %in% combined_groups) %>%
mutate(
Gene_group = factor(Gene_group, levels = combined_groups),
Gene_Type_label = ifelse(Gene_Type == "Pseudogene", paste(Gene_group, "(P)"), paste(Gene_group, "(F)")),
Gene_Type_combined = paste(Gene_group, Gene_Type, sep = ".")  # Combine Gene_group and Gene_Type for color mapping
)
# Define function to calculate outlier boundaries for jitter
calculate_outliers <- function(data) {
Q1 <- quantile(data$Z_score, 0.25, na.rm = TRUE)
Q3 <- quantile(data$Z_score, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
return(c(lower_bound, upper_bound))
}
# Calculate outliers for the combined data
outlier_bounds <- calculate_outliers(combined_data)
# Filter jitter points to only include those outside the boxplot range
combined_data_jitter <- combined_data %>%
filter(Z_score < outlier_bounds[1] | Z_score > outlier_bounds[2])
# Plot combined data
combined_plot <- ggplot(combined_data, aes(x = Gene_Type_label, y = Z_score, fill = Gene_Type_combined)) +
geom_violin(alpha = 0.5, trim = FALSE) +
geom_boxplot(width = 0.1, outlier.shape = NA, alpha = 0.7) +
geom_jitter(data = combined_data_jitter, width = 0.2, height = 0, size = 1.5, alpha = 0.5, colour = "red") +
stat_summary(fun = "median", geom = "point", shape = 23, size = 2, fill = "white") +
theme_minimal() +
labs(
title = "PhyloP100 Z-scores for RNU1, RNU2, RNU4, RNU5, RNU6",
x = "Gene Type",
y = "Z-score"
) +
scale_fill_manual(values = custom_colors) +  # Apply custom colors
theme(
legend.position = "none",
plot.title = element_text(face = "bold", size = 14)
)
# Save the combined plot
ggsave(filename = "../../results/Z_scores_combined_RNU1_RNU2_RNU4_RNU5_RNU6.png", plot = combined_plot, width = 8, height = 6)
# Filter data for RNU12
rnu12_data <- normalized_data %>%
filter(Gene_group == "RNU12")
rnu12_data$Z_score = rnu12_data$PhyloP100_median / rnu12_data$PhyloP100_median[rnu12_data$Gene == "RNU12-2P"]
# Plot for RNU12 with only the two singular points
rnu12_plot <- ggplot(rnu12_data, aes(x = Gene_Type, y = Z_score, color = Gene_Type_combined)) +
geom_point(size = 4, alpha = 0.7) +  # Singular data points
scale_color_manual(values = custom_colors) +  # Custom colors for RNU12
labs(
title = "PhyloP100 Z-scores for RNU12",
x = "Gene Type",
y = "Z-score"
) +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(face = "bold", size = 14)
) +
expand_limits(y = c(0, 3))
# Save the plot for RNU12
ggsave(filename = "../../results/Z_scores_RNU12.png", plot = rnu12_plot, width = 8, height = 6)
# Create and save individual plots for other Gene_groups
other_gene_groups <- setdiff(unique(normalized_data$Gene_group), combined_groups)
# Exclude "RNU12" directly from the vector
other_gene_groups <- other_gene_groups[other_gene_groups != "RNU12"]
for (group in other_gene_groups) {
group_data <- normalized_data %>%
filter(Gene_group == group) %>%
filter(is.finite(Z_score))  # Ensure no NA values in Z_scores
# Calculate outliers for the group
outlier_bounds <- calculate_outliers(group_data)
# Filter jitter points to only include those outside the boxplot range
group_data_jitter <- group_data %>%
filter(Z_score < outlier_bounds[1] | Z_score > outlier_bounds[2])
# Create and save individual plot
p <- ggplot(group_data, aes(x = Gene_Type, y = Z_score, fill = interaction(Gene_group, Gene_Type))) +
geom_violin(alpha = 0.5, trim = FALSE) +
geom_boxplot(width = 0.1, outlier.shape = NA, alpha = 0.7) +
geom_jitter(data = group_data_jitter, width = 0.2, height = 0, size = 1.5, alpha = 0.5, colour = "red") +
stat_summary(fun = "median", geom = "point", shape = 23, size = 2, fill = "white") +
theme_minimal() +
labs(
title = paste("PhyloP100 Z-scores for Gene Group:", group),
x = "Gene Type",
y = "Z-score"
) +
scale_fill_manual(values = custom_colors) +
theme(
legend.position = "none",
plot.title = element_text(face = "bold", size = 14)
)
ggsave(filename = paste0("../../results/Z_scores_", group, ".png"), plot = p, width = 8, height = 6)
}
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Data-loading step
data <- read.csv("../../results/combined_gene_data.csv")
# Define custom colors for each Gene_group and Gene_Type combination
custom_colors <- c(
"RNU1.Functional" = "#1f77b4",
"RNU1.Pseudogene" = "#aec7e8",
"RNU2.Functional" = "#d62728",
"RNU2.Pseudogene" = "#ff9896",
"RNU4.Functional" = "#ffc23c",
"RNU4.Pseudogene" = "#fff26c",
"RNU5.Functional" = "#2ca02c",
"RNU5.Pseudogene" = "#98df8a",
"RNU6.Functional" = "#9467bd",
"RNU6.Pseudogene" = "#c5b0d5",
"RNU4ATAC.Functional" = "#8c564b",
"RNU4ATAC.Pseudogene" = "#c5b0a0",
"RNU6ATAC.Functional" = "#e377c2",
"RNU6ATAC.Pseudogene" = "#f7b6d0",
"RNU11.Functional" = "#7f7f7f",
"RNU11.Pseudogene" = "#bfbfbf",
"RNU12.Functional" = "#bcbd22",
"RNU12.Pseudogene" = "#d7e300",
"VTRNA.Functional" = "#17becf",
"VTRNA.Pseudogene" = "#a7d8e7",
"RNY.Functional" = "#ffb6c1",
"RNY.Pseudogene" = "#ff8ca0",
"TRNA.Functional" = "#8c8c8c",
"TRNA.Pseudogene" = "#b2b2b2",
"RN7SL.Functional" = "#f4a300",
"RN7SL.Pseudogene" = "#f9c100",
"RNU7.Functional" = "#e9d3ff",
"RNU7.Pseudogene" = "#d6a9ff",
"RN7SK.Functional" = "#1f77b4",
"RN7SK.Pseudogene" = "#88c9f2"
)
# Clean the data: Remove rows with non-finite PhyloP100_median
clean_data <- data %>%
filter(is.finite(PhyloP100_median))
# Normalize data by Gene_group and Gene_Type
normalized_data <- clean_data %>%
group_by(Gene_group) %>%
mutate(
control_median = ifelse(
any(Gene_Type == "Pseudogene"),
median(PhyloP100_median[Gene_Type == "Pseudogene"]),
NA
),
control_mad = ifelse(
any(Gene_Type == "Pseudogene"),
mad(PhyloP100_median[Gene_Type == "Pseudogene"]),
1  # Use mad = 1 to avoid division by zero
),
Z_score = ifelse(
!is.na(control_median),
(PhyloP100_median - control_median) / control_mad,
NA
)
) %>%
ungroup() %>%
mutate(Z_score = ifelse(is.na(Z_score), 0, Z_score))
# Create Gene_Type_combined for all gene groups (not just the combined ones)
normalized_data <- normalized_data %>%
mutate(
Gene_Type_combined = paste(Gene_group, Gene_Type, sep = ".")  # Combine Gene_group and Gene_Type for color mapping
)
# Define the combined groups for RNU1, RNU2, RNU4, RNU5, and RNU6
combined_groups <- c("RNU1", "RNU2", "RNU4", "RNU5", "RNU6")
# Create combined data for the selected Gene_groups
combined_data <- normalized_data %>%
filter(Gene_group %in% combined_groups) %>%
mutate(
Gene_group = factor(Gene_group, levels = combined_groups),
Gene_Type_label = ifelse(Gene_Type == "Pseudogene", paste(Gene_group, "(P)"), paste(Gene_group, "(F)")),
Gene_Type_combined = paste(Gene_group, Gene_Type, sep = ".")  # Combine Gene_group and Gene_Type for color mapping
)
# Define function to calculate outlier boundaries for jitter
calculate_outliers <- function(data) {
Q1 <- quantile(data$Z_score, 0.25, na.rm = TRUE)
Q3 <- quantile(data$Z_score, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
return(c(lower_bound, upper_bound))
}
# Calculate outliers for the combined data
outlier_bounds <- calculate_outliers(combined_data)
# Filter jitter points to only include those outside the boxplot range
combined_data_jitter <- combined_data %>%
filter(Z_score < outlier_bounds[1] | Z_score > outlier_bounds[2])
# Plot combined data with jitter points
combined_plot <- ggplot(combined_data, aes(x = Gene_Type_label, y = Z_score, color = Gene_Type_combined)) +
geom_jitter(width = 0.2, height = 0, size = 1.5, alpha = 0.7) +  # Use jitter instead of violin and boxplot
stat_summary(fun = "median", geom = "point", shape = 23, size = 3, fill = "white") +  # Highlight median
theme_minimal() +
labs(
title = "PhyloP100 Z-scores for RNU1, RNU2, RNU4, RNU5, RNU6",
x = "Gene Type",
y = "Z-score"
) +
scale_color_manual(values = custom_colors) +  # Apply custom colors
theme(
legend.position = "none",
plot.title = element_text(face = "bold", size = 14)
)
# Save the combined jitter plot
ggsave(filename = "../../results/Z_scores_combined_RNU1_RNU2_RNU4_RNU5_RNU6_jitter.png", plot = combined_plot, width = 8, height = 6)
# Filter data for RNU12
rnu12_data <- normalized_data %>%
filter(Gene_group == "RNU12")
rnu12_data$Z_score = rnu12_data$PhyloP100_median / rnu12_data$PhyloP100_median[rnu12_data$Gene == "RNU12-2P"]
# Plot for RNU12 with only the two singular points
rnu12_plot <- ggplot(rnu12_data, aes(x = Gene_Type, y = Z_score, color = Gene_Type_combined)) +
geom_point(size = 4, alpha = 0.7) +  # Singular data points
scale_color_manual(values = custom_colors) +  # Custom colors for RNU12
labs(
title = "PhyloP100 Z-scores for RNU12",
x = "Gene Type",
y = "Z-score"
) +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(face = "bold", size = 14)
) +
expand_limits(y = c(0, 3))
# Save the plot for RNU12
ggsave(filename = "../../results/Z_scores_RNU12_jitter.png", plot = rnu12_plot, width = 8, height = 6)
# Create and save individual plots for other Gene_groups
other_gene_groups <- setdiff(unique(normalized_data$Gene_group), combined_groups)
# Exclude "RNU12" directly from the vector
other_gene_groups <- other_gene_groups[other_gene_groups != "RNU12"]
for (group in other_gene_groups) {
group_data <- normalized_data %>%
filter(Gene_group == group) %>%
filter(is.finite(Z_score))  # Ensure no NA values in Z_scores
# Calculate outliers for the group
outlier_bounds <- calculate_outliers(group_data)
# Filter jitter points to only include those outside the boxplot range
group_data_jitter <- group_data %>%
filter(Z_score < outlier_bounds[1] | Z_score > outlier_bounds[2])
# Create and save individual jitter plot
p <- ggplot(group_data, aes(x = Gene_Type, y = Z_score, color = interaction(Gene_group, Gene_Type))) +
geom_jitter(width = 0.2, height = 0, size = 1.5, alpha = 0.7) +  # Use jitter
stat_summary(fun = "median", geom = "point", shape = 23, size = 3, fill = "white") +  # Highlight median
theme_minimal() +
labs(
title = paste("PhyloP100 Z-scores for Gene Group:", group),
x = "Gene Type",
y = "Z-score"
) +
scale_color_manual(values = custom_colors) +
theme(
legend.position = "none",
plot.title = element_text(face = "bold", size = 14)
)
ggsave(filename = paste0("../../results/Z_scores_", group, "_jitter.png"), plot = p, width = 8, height = 6)
}
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Data-loading step
data <- read.csv("../../results/combined_gene_data.csv")
# Define custom colors for each Gene_group and Gene_Type combination
custom_colors <- c(
"RNU1.Functional" = "#1f77b4",
"RNU1.Pseudogene" = "#aec7e8",
"RNU2.Functional" = "#d62728",
"RNU2.Pseudogene" = "#ff9896",
"RNU4.Functional" = "#ffc23c",
"RNU4.Pseudogene" = "#fff26c",
"RNU5.Functional" = "#2ca02c",
"RNU5.Pseudogene" = "#98df8a",
"RNU6.Functional" = "#9467bd",
"RNU6.Pseudogene" = "#c5b0d5",
"RNU4ATAC.Functional" = "#8c564b",
"RNU4ATAC.Pseudogene" = "#c5b0a0",
"RNU6ATAC.Functional" = "#e377c2",
"RNU6ATAC.Pseudogene" = "#f7b6d0",
"RNU11.Functional" = "#7f7f7f",
"RNU11.Pseudogene" = "#bfbfbf",
"RNU12.Functional" = "#bcbd22",
"RNU12.Pseudogene" = "#d7e300",
"VTRNA.Functional" = "#17becf",
"VTRNA.Pseudogene" = "#a7d8e7",
"RNY.Functional" = "#ffb6c1",
"RNY.Pseudogene" = "#ff8ca0",
"TRNA.Functional" = "#8c8c8c",
"TRNA.Pseudogene" = "#b2b2b2",
"RN7SL.Functional" = "#f4a300",
"RN7SL.Pseudogene" = "#f9c100",
"RNU7.Functional" = "#e9d3ff",
"RNU7.Pseudogene" = "#d6a9ff",
"RN7SK.Functional" = "#1f77b4",
"RN7SK.Pseudogene" = "#88c9f2"
)
# Clean the data: Remove rows with non-finite ENCODE_max
clean_data <- data %>%
filter(is.finite(ENCODE_max))
# Normalize data by Gene_group and Gene_Type
normalized_data <- clean_data %>%
group_by(Gene_group) %>%
mutate(
control_median = ifelse(
any(Gene_Type == "Pseudogene"),
median(ENCODE_max[Gene_Type == "Pseudogene"], na.rm = TRUE),
NA
),
control_mad = ifelse(
any(Gene_Type == "Pseudogene"),
mad(ENCODE_max[Gene_Type == "Pseudogene"], na.rm = TRUE),
1  # Default MAD to 1 to avoid division by zero
),
control_mad = ifelse(control_mad == 0, 1e-6, control_mad),  # Avoid MAD of 0 by using a small constant
Z_score = ifelse(
!is.na(control_median),
(ENCODE_max - control_median) / control_mad,
NA
)
) %>%
ungroup() %>%
mutate(Z_score = ifelse(is.finite(Z_score), Z_score, 0))  # Replace remaining non-finite values with 0
# Apply log transformation to Z-score
normalized_data <- normalized_data %>%
mutate(
Z_score_log = ifelse(
Z_score > 0, log10(Z_score + 1),  # Log-transform positive Z-scores
0  # Keep Z-scores <= 0 as 0
)
)
# Create Gene_Type_combined for all gene groups (not just the combined ones)
normalized_data <- normalized_data %>%
mutate(
Gene_Type_combined = paste(Gene_group, Gene_Type, sep = ".")  # Combine Gene_group and Gene_Type for color mapping
)
# Define the combined groups for RNU1, RNU2, RNU4, RNU5, and RNU6
combined_groups <- c("RNU1", "RNU2", "RNU4", "RNU5", "RNU6")
# Create combined data for the selected Gene_groups
combined_data <- normalized_data %>%
filter(Gene_group %in% combined_groups) %>%
mutate(
Gene_group = factor(Gene_group, levels = combined_groups),
Gene_Type_label = ifelse(Gene_Type == "Pseudogene", paste(Gene_group, "(P)"), paste(Gene_group, "(F)")),
Gene_Type_combined = paste(Gene_group, Gene_Type, sep = ".")  # Combine Gene_group and Gene_Type for color mapping
)
# Plot combined data with jitter points
combined_plot <- ggplot(combined_data, aes(x = Gene_Type_label, y = Z_score_log, color = Gene_Type_combined)) +
geom_jitter(width = 0.2, height = 0, size = 1.5, alpha = 0.7) +  # Use jitter instead of violin and boxplot
stat_summary(fun = "median", geom = "point", shape = 23, size = 3, fill = "white") +  # Highlight median
theme_minimal() +
labs(
title = "ENCODE Z-scores for RNU1, RNU2, RNU4, RNU5, RNU6",
x = "Gene Type",
y = "Log10 Z-score"
) +
scale_color_manual(values = custom_colors) +  # Apply custom colors
theme(
legend.position = "none",
plot.title = element_text(face = "bold", size = 14)
) +
expand_limits(y = c(0.8, 4))
# Save the combined jitter plot
ggsave(filename = "../../results/Expr_ENCODE_Z__combined_RNU1_RNU2_RNU4_RNU5_RNU6_jitter.png", plot = combined_plot, width = 8, height = 6)
# Filter data for RNU12
rnu12_data <- normalized_data %>%
filter(Gene_group == "RNU12")
rnu12_data$Z_score = rnu12_data$ENCODE_max / rnu12_data$ENCODE_max[rnu12_data$Gene == "RNU12-2P"]
# Plot for RNU12 with only the two singular points
rnu12_plot <- ggplot(rnu12_data, aes(x = Gene_Type, y = Z_score_log, color = Gene_Type_combined)) +
geom_point(size = 4, alpha = 0.7) +  # Singular data points
scale_color_manual(values = custom_colors) +  # Custom colors for RNU12
labs(
title = "ENCODE Z-scores for RNU12",
x = "Gene Type",
y = "Log10 Z-score"
) +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(face = "bold", size = 14)
)
# Save the plot for RNU12
ggsave(filename = "../../results/Expr_ENCODE_Z_RNU12_jitter.png", plot = rnu12_plot, width = 8, height = 6)
# Create and save individual plots for other Gene_groups
other_gene_groups <- setdiff(unique(normalized_data$Gene_group), combined_groups)
# Exclude "RNU12" directly from the vector
other_gene_groups <- other_gene_groups[other_gene_groups != "RNU12"]
for (group in other_gene_groups) {
group_data <- normalized_data %>%
filter(Gene_group == group) %>%
filter(is.finite(Z_score))  # Ensure no NA values in Z_scores
# Create and save individual jitter plot
p <- ggplot(group_data, aes(x = Gene_Type, y = Z_score_log, color = interaction(Gene_group, Gene_Type))) +
geom_jitter(width = 0.2, height = 0, size = 1.5, alpha = 0.7) +  # Use jitter
stat_summary(fun = "median", geom = "point", shape = 23, size = 3, fill = "white") +  # Highlight median
theme_minimal() +
labs(
title = paste("ENCODE Z-scores for Gene Group:", group),
x = "Gene Type",
y = "Log10 Z-score"
) +
scale_color_manual(values = custom_colors) +
theme(
legend.position = "none",
plot.title = element_text(face = "bold", size = 14)
)
ggsave(filename = paste0("../../results/Expr_ENCODE_Z_", group, "_jitter.png"), plot = p, width = 8, height = 6)
}
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
