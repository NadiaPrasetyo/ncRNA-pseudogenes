library (ggplot2)
data <- read.csv(RNU2_cons.csv)
library(readr)
RNU2_cons <- read_csv("RNU2_cons.csv")
View(RNU2_cons)
mean_score <- mean(RNU2_cons$Score)
sd_score <- sd(RNU2_cons$Score)
# Remove rows with NA values in the Score column
RNU2_cons_clean <- RNU2_cons[!is.na(RNU2_cons$Score), ]
mean_score <- mean(RNU2_cons$Score)
sd_score <- sd(RNU2_cons$Score)
mean_score <- mean(RNU2_cons_clean$Score)
sd_score <- sd(RNU2_cons_clean$Score)
# Create histogram of Score data
hist(RNU2_cons_clean$Score,
probability = TRUE,
col = "skyblue",
border = "black",
main = "Score Distribution with Normal Curve",
xlab = "Score",
ylab = "Density",
breaks = 30)  # Adjust breaks for histogram granularity
# Overlay the normal distribution curve
curve(dnorm(x, mean = mean_score, sd = sd_score),
col = "red",
lwd = 2,
add = TRUE)
# Scatter plot of Score vs Position
ggplot(RNU2_cons, aes(x = Position, y = Score)) +
geom_point(color = "blue") +
labs(title = "Score vs Position",
x = "Position",
y = "Score") +
theme_minimal()
# Create a boxplot for Score by Gene using Base R
boxplot(Score ~ Gene, data = RNU2_cons,
main = "Distribution of Scores by Gene",
xlab = "Gene",
ylab = "Score",
col = "lightblue", border = "black")
# Create a boxplot for Score by Gene
ggplot(RNU2_cons, aes(x = Gene, y = Score)) +
geom_boxplot(fill = "lightblue", color = "black") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +  # Rotate x-axis labels for better visibility
labs(title = "Distribution of Scores by Gene",
x = "Gene",
y = "Score") +
theme_minimal()
# 1. Extract the numeric part from the Gene column
RNU2_cons$Gene_number <- as.numeric(gsub("RNU2-(\\d+)", "\\1", RNU2_cons$Gene))
# 2. Reorder the Gene factor based on the extracted number
RNU2_cons$Gene <- factor(RNU2_cons$Gene, levels = unique(RNU2_cons$Gene[order(RNU2_cons$Gene_number)]))
# 3. Plot using ggplot2, now ordered by the numeric suffix of the Gene
library(ggplot2)
# Boxplot or bar plot
ggplot(RNU2_cons, aes(x = Gene, y = Score)) +
geom_boxplot(fill = "lightblue", color = "black") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +  # Rotate x-axis labels for better readability
labs(title = "Distribution of Scores by Gene (Ordered)",
x = "Gene",
y = "Score") +
theme_minimal()
# Create the plot
plot <- ggplot(RNU2_cons, aes(x = Gene, y = Score)) +
geom_boxplot(fill = "lightblue", color = "black") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +  # Rotate x-axis labels for better readability
labs(title = "Distribution of Scores by Gene (Ordered)",
x = "Gene",
y = "Score") +
theme_minimal()
# Save the plot to a file (e.g., PNG)
ggsave("RNU2_score_plot.png", plot = plot, width = 10, height = 6)
# Alternatively, you can specify other formats like PDF
ggsave("RNU2_score_plot.pdf", plot = plot, width = 10, height = 6)
# Create the plot
plot <- ggplot(RNU2_cons, aes(x = Gene, y = Score)) +
geom_boxplot(fill = "lightblue", color = "black") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +  # Rotate x-axis labels to vertical
labs(title = "Distribution of Scores by Gene (Ordered)",
x = "Gene",
y = "Score") +
theme_minimal()
# Optionally save to PDF
ggsave("RNU2_score_plot_vertical_labels.pdf", plot = plot, width = 10, height = 6)
> # Create the plot
# Create the plot
> plot <- ggplot(RNU2_cons_clean, aes(x = Gene, y = Score)) +
# Create the plot
> plot <- ggplot(RNU2_cons_clean, aes(x = Gene, y = Score)) +
# Create the plotplot <- ggplot(RNU2_cons_clean, aes(x = Gene, y = Score)) +
+     geom_boxplot(fill = "lightblue", color = "black") +
+     theme(axis.text.x = element_text(angle = 90, hjust = 1)) +  # Rotate x-axis labels for better readability
+     labs(title = "Distribution of Scores by Gene",
+          x = "Gene",
# Create the plot
plot <- ggplot(RNU2_cons_clean, aes(x = Gene, y = Score)) +
+     geom_boxplot(fill = "lightblue", color = "black") +
+     theme(axis.text.x = element_text(angle = 90, hjust = 1)) +  # Rotate x-axis labels for better readability
+     labs(title = "Distribution of Scores by Gene",
+          x = "Gene",
# Create the plot
plot <- ggplot(RNU2_cons_clean, aes(x = Gene, y = Score)) +
geom_boxplot(fill = "lightblue", color = "black") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +  # Rotate x-axis labels to vertical
labs(title = "Distribution of Scores by Gene (Ordered)",
x = "Gene",
y = "Score") +
theme_minimal()
# Optionally save to PDF
ggsave("RNU2_score_plot_vertical_labels.pdf", plot = plot, width = 10, height = 6)
# Create the plot
plot <- ggplot(RNU2_cons_clean, aes(x = Gene, y = Score)) +
geom_boxplot(fill = "lightblue", color = "black") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +  # Rotate x-axis labels to vertical
labs(title = "Distribution of Scores by Gene (Ordered)",
x = "Gene",
y = "Score") +
theme_minimal()
# Optionally save to PDF
ggsave("RNU2_score_plot_vertical_labels.pdf", plot = plot, width = 10, height = 6)
library(ggplot2)
# Create the plot with coord_flip() to rotate the axes
plot <- ggplot(RNU2_cons_clean, aes(x = Gene, y = Score)) +
geom_boxplot(fill = "lightblue", color = "black") +
coord_flip() +  # This will swap the axes, effectively rotating the x-axis labels
labs(title = "Distribution of Scores by Gene (Ordered)",
x = "Gene",
y = "Score") +
theme_minimal()
# Save the plot to a file
ggsave("RNU2_score_plot_vertical_labels_flip.pdf", plot = plot, width = 10, height = 6)
library(ggplot2)
# Create the plot with coord_flip() to rotate the axes
plot <- ggplot(RNU2_cons_clean, aes(x = Score, y = Gene)) +
geom_boxplot(fill = "lightblue", color = "black") +
labs(title = "Distribution of Scores by Gene (Ordered)",
x = "Gene",
y = "Score") +
theme_minimal()
# Save the plot to a file
ggsave("RNU2_score_plot_vertical_labels_flip.pdf", plot = plot, width = 10, height = 6)
# 1. Extract the numeric part from the Gene column
RNU2_cons_clean$Gene_number <- as.numeric(gsub("RNU2-(\\d+)", "\\1", RNU2_cons_clean$Gene))
# 2. Reorder the Gene factor based on the extracted number
RNU2_cons_clean$Gene <- factor(RNU2_cons_clean$Gene, levels = unique(RNU2_cons_clean$Gene[order(RNU2_cons_clean$Gene_number)]))
View(RNU2_cons_clean)
View(RNU2_cons)
View(RNU2_cons_clean)
# 1. Extract the numeric part from the Gene column
RNU2_cons_clean$Gene_number <- as.numeric(gsub("RNU2-(\\d+)P", "\\1", RNU2_cons_clean$Gene))
# 2. Reorder the Gene factor based on the extracted number
RNU2_cons_clean$Gene <- factor(RNU2_cons_clean$Gene, levels = unique(RNU2_cons_clean$Gene[order(RNU2_cons_clean$Gene_number)]))
# 1. Extract the numeric part from the Gene column
RNU2_cons_clean$Gene_number <- as.numeric(gsub("RNU2-(\\d+)P?", "\\1", RNU2_cons_clean$Gene))
# 2. Reorder the Gene factor based on the extracted number
RNU2_cons_clean$Gene <- factor(RNU2_cons_clean$Gene, levels = unique(RNU2_cons_clean$Gene[order(RNU2_cons_clean$Gene_number)]))
plot <- ggplot(RNU2_cons_clean, aes(x = Gene, y = Score)) +
geom_boxplot(fill = "lightblue", color = "black") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 8)) +  # Rotate labels and adjust text size
labs(title = "Distribution of Scores by Gene (Ordered)",
x = "Gene",
y = "Score") +
theme_minimal()
# Save the plot with larger dimensions if needed
ggsave("RNU2_score_plot_vertical_labels_large.pdf", plot = plot, width = 12, height = 8)
plot <- ggplot(RNU2_cons_clean, aes(x = Score, y = Gene) +
geom_boxplot(fill = "lightblue", color = "black") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 8)) +  # Rotate labels and adjust text size
labs(title = "Distribution of Scores by Gene (Ordered)",
x = "Gene",
y = "Score") +
theme_minimal()
# Save the plot with larger dimensions if needed
ggsave("RNU2_score_plot_vertical_labels_large.pdf", plot = plot, width = 12, height = 8)
plot <- ggplot(RNU2_cons_clean, aes(x = Score, y = Gene) +
geom_boxplot(fill = "lightblue", color = "black") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 8)) +  # Rotate labels and adjust text size
labs(title = "Distribution of Scores by Gene (Ordered)",
x = "Gene",
y = "Score") +
theme_minimal()
ggsave("RNU2_score_plot_vertical_labels_large.pdf", plot = plot, width = 12, height = 8)
plot <- ggplot(RNU2_cons, aes(x = Score, y = Gene)) +
geom_boxplot(fill = "lightblue", color = "black") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 8)) +  # Rotate labels and adjust text size
labs(title = "Distribution of Scores by Gene (Ordered)",
x = "Gene",
y = "Score") +
theme_minimal()
# Save the plot with larger dimensions if needed
ggsave("RNU2_score_plot_vertical_labels_large.pdf", plot = plot, width = 12, height = 8)
plot <- ggplot(RNU2_cons_clean, aes(x = Score, y = Gene)) +
geom_boxplot(fill = "lightblue", color = "black") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 8)) +  # Rotate labels and adjust text size
labs(title = "Distribution of Scores by Gene (Ordered)",
x = "Gene",
y = "Score") +
theme_minimal()
# Save the plot with larger dimensions if needed
ggsave("RNU2_score_plot_vertical_labels_large.pdf", plot = plot, width = 12, height = 8)
plot <- ggplot(RNU2_cons_clean, aes(x = Score, y = Gene)) +
geom_boxplot(fill = "lightblue", color = "black") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 8)) +  # Rotate labels and adjust text size
labs(title = "Distribution of Scores by Gene (Ordered)",
x = "Score",
y = "Gene") +
theme_minimal()
# Save the plot with larger dimensions if needed
ggsave("RNU2_score_plot_vertical_labels_large.pdf", plot = plot, width = 12, height = 8)
library(readr)
RNU1_cons <- read_csv("RNU1_cons.csv")
View(RNU1_cons)
RNU1_cons_clean <- RNU1_cons[!is.na(RNU1_cons$Score), ]
plot_RNU1 <- ggplot(RNU1_cons_clean, aes(x = Score, y = Gene)) +
+     geom_boxplot(fill = "lightpink", color = "black") +
+     theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 8)) +  # Rotate labels and adjust text size
+     labs(title = "Distribution of Scores by Gene (Ordered)",
+          x = "Score",
plot_RNU1 <- ggplot(RNU1_cons_clean, aes(x = Score, y = Gene)) +
geom_boxplot(fill = "lightpink", color = "black") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 8)) +  # Rotate labels and adjust text size
labs(title = "Distribution of Scores by Gene (Ordered)",
x = "Score",
y = "Gene") +
theme_minimal()
# Save the plot with larger dimensions if needed
ggsave("RNU1_score_plot_vertical_labels_large.pdf", plot = plot_RNU1, width = 12, height = 8)
# 1. Extract the numeric part from the Gene column
RNU1_cons_clean$Gene_number <- as.numeric(gsub("RNU1-(\\d+)P?", "\\1", RNU1_cons_clean$Gene))
# 2. Reorder the Gene factor based on the extracted number
RNU1_cons_clean$Gene <- factor(RNU1_cons_clean$Gene, levels = unique(RNU1_cons_clean$Gene[order(RNU1_cons_clean$Gene_number)]))
plot_RNU1 <- ggplot(RNU1_cons_clean, aes(x = Score, y = Gene)) +
geom_boxplot(fill = "lightpink", color = "black") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 8)) +  # Rotate labels and adjust text size
labs(title = "Distribution of Scores by Gene (Ordered)",
x = "Score",
y = "Gene") +
theme_minimal()
# Save the plot with larger dimensions if needed
ggsave("RNU1_score_plot_vertical_labels_large.pdf", plot = plot_RNU1, width = 12, height = 8)
